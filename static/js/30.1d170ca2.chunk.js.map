{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","components/ExpandableSectionButton/ExpandableSectionButton.tsx","utils/getLiquidityUrlPathParts.ts","components/ExpandableSectionButton/index.ts","views/Vaults/components/types.ts","views/Vaults/components/VaultCard/DetailsSection.tsx","views/Vaults/components/VaultCard/CardHeading.tsx","views/Vaults/components/DepositModal.tsx","views/Vaults/components/WithdrawModal.tsx","views/Vaults/components/VaultCard/StakeAction.tsx","views/Vaults/components/Tooltip/Tooltip.tsx","views/Vaults/components/VaultCard/HarvestAction.tsx","views/Vaults/components/VaultCard/CardActionsContainer.tsx","views/Vaults/components/VaultCard/VaultCard.tsx","views/Vaults/components/VaultTable/Apr.tsx","views/Vaults/components/VaultTable/Vault.tsx","views/Vaults/components/VaultTable/Earned.tsx","views/Vaults/components/VaultTable/Details.tsx","views/Vaults/components/VaultTable/Multiplier.tsx","views/Vaults/components/VaultTable/Liquidity.tsx","views/Vaults/components/VaultTable/Actions/styles.ts","views/Vaults/components/VaultTable/Actions/HarvestAction.tsx","views/Vaults/components/VaultTable/Actions/StakedAction.tsx","views/Vaults/components/VaultTable/Actions/ActionPanel.tsx","views/Vaults/components/VaultTable/CellLayout.tsx","views/Vaults/components/VaultTable/Row.tsx","views/Vaults/components/VaultTable/VaultTable.tsx","views/Vaults/components/VaultTabButtons/index.tsx","views/Vaults/components/SearchInput.tsx","views/Vaults/components/Select/Select.tsx","views/Vaults/components/JetVault.tsx","views/Vaults/Vaults.tsx"],"names":["_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","Wrapper","styled","div","theme","colors","textSubtle","ExpandableSectionButton","onClick","expanded","t","useTranslation","aria-label","role","color","bold","defaultProps","getLiquidityUrlPathParts","quoteTokenAdresses","tokenAddresses","firstPart","chainId","secondPart","ViewMode","StyledLinkExternal","LinkExternal","text","primary","DetailsSection","bscScanAddress","removed","totalValueFormated","lpLabel","addLiquidityUrl","justifyContent","href","external","Flex","MultiplierTag","Tag","card","CardHeading","multiplier","isCommunityVault","vaultImage","tokenSymbol","provider","alignItems","mb","src","toLocaleLowerCase","alt","width","height","flexDirection","split","variant","DepositModal","max","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","value","handleSelectMax","title","symbol","ModalInput","onSelectMax","onChange","inputTitle","ModalActions","disabled","a","style","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","vault","onStake","useStakeVault","getAddress","vaultAddresses","onUnstake","useUnstakeVault","rawStakedBalance","getBalanceNumber","displayBalance","toLocaleString","useModal","onPresentDeposit","onPresentWithdraw","mr","TooltipContent","tooltip","background","zIndices","modal","Container","Tooltip","content","children","HarvestAction","earnings","props","account","useWeb3React","onReward","useVaultHarvest","strategyAddresses","rawEarningsBalance","Action","StyledUnlockButton","UnlockButton","StyledButton","Button","CardActions","requestedApproval","setRequestedApproval","useVaultFromSymbol","lpSymbol","pid","lpAddresses","useVaultUser","allowance","lpAddress","isSingle","token","address","process","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","lpContract","getBep20Contract","onApprove","useApproveVault","handleApprove","console","error","textTransform","fontSize","pr","mt","RainbowLight","keyframes","StyledCardAccent","FCard","Divider","borderColor","ExpandingWrapper","StyledText","Text","textDisabled","VaultCard","showExpandableSection","setShowExpandableSection","communityVaults","includes","liquidity","toNumber","undefined","maximumFractionDigits","replace","earnLabel","vaultApy","apy","liquidityUrlPathParts","quoteToken","BASE_ADD_LIQUIDITY_URL","display","CardActionsContainer","AprWrapper","Apr","originalValue","IconImage","Image","mediaQueries","sm","Vault","label","Amount","span","earned","Earned","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","MultiplierWrapper","Multiplier","displayMultipler","toLowerCase","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","input","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","userData","prices","useGetApiPrices","earningsBigNumber","BigNumber","earningsBusd","quoteTokenPriceUsd","totalLiquidity","lpTotalInQuoteToken","times","lpPrice","vaultBalance","multipliedBy","useCountUp","start","end","duration","separator","decimals","countUp","update","updateValue","useRef","useEffect","current","ml","currentBalance","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","dual","exchangeLink","bsc","info","StakedAction","Label","ContentContainer","CellLayout","MobileColumnSchema","id","name","translationId","sortable","DesktopColumnSchema","cells","farm","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","VaultMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","hideButton","columnIndex","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","VaultTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","VaultTabButtons","useRouteMatch","url","isExact","textColor","useTheme","isDark","activeIndex","scale","as","Link","to","borderRadius","StyledInput","Input","InputWrapper","SearchInput","setToggled","inputEl","placeholder","onBlur","DropDownHeader","shadows","inset","inputSecondary","DropDownListContainer","dropdown","DropDownContainer","isOpen","css","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","float","StyledBackground","Img","img","JetVault","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Header","farming","Container2","Background","Vaults","path","pathname","useLocation","vaultsLP","useValuts","bowPrice","usePriceBowUsd","query","setQuery","TABLE","viewMode","sortOption","setSortOption","providerOption","dispatch","useDispatch","fastRefresh","useRefresh","fetchVaultUserDataAsync","stackedOnly","setStackedOnly","calculateAPY","totalFarmLiquidity","lpTotalMcInQuoteToken","rewardPrice","getVaultApy","poolWeight","activeVaults","filter","inactiveVaults","stackedOnlyVaults","vaultsList","vaultsToDisplay","vaultsToDisplayWithAPY","tokenBalanceMC","bow","lowercaseQuery","isActive","vaultsStaked","rowData","vaults","orderBy","sortVaults","v","quoteTokenSymbol","cakePrice","image","size","Page","checked","marginRight","marginLeft","event","sort","b","exact","renderContent"],"mappings":"oIACe,SAASA,EAAyBC,EAAQC,GACvD,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IACIE,EAAKC,EADLC,ECHS,SAAuCJ,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,GAC3B,IAEIE,EAAKC,EAFLC,EAAS,GACTC,EAAaC,OAAOC,KAAKP,GAG7B,IAAKG,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCD,EAAMG,EAAWF,GACbF,EAASQ,QAAQP,IAAQ,IAC7BE,EAAOF,GAAOF,EAAOE,IAGvB,OAAOE,EDTM,CAA6BJ,EAAQC,GAGlD,GAAIK,OAAOI,sBAAuB,CAChC,IAAIC,EAAmBL,OAAOI,sBAAsBV,GAEpD,IAAKG,EAAI,EAAGA,EAAIQ,EAAiBH,OAAQL,IACvCD,EAAMS,EAAiBR,GACnBF,EAASQ,QAAQP,IAAQ,GACxBI,OAAOM,UAAUC,qBAAqBC,KAAKd,EAAQE,KACxDE,EAAOF,GAAOF,EAAOE,IAIzB,OAAOE,E,uHEPHW,EAAUC,UAAOC,IAAV,sJAOD,qBAAGC,MAAkBC,OAAOC,cAIlCC,EAAkE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC1EC,EAAMC,cAAND,EACR,OACE,eAACT,EAAD,CAASW,aAAW,kCAAkCC,KAAK,SAASL,QAAS,kBAAMA,KAAnF,UACE,cAAC,KAAD,CAAMM,MAAM,aAAaC,MAAI,EAA7B,SACcL,EAAXD,EAAa,OAAY,aAE3BA,EAAW,cAAC,IAAD,IAAoB,cAAC,IAAD,QAKtCF,EAAwBS,aAAe,CACrCP,UAAU,GAGGF,O,kCC5BAU,IAPkB,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,mBAAoBC,EAAqB,EAArBA,eAEhDC,EAAYF,EAAqBA,EAAmBG,MAAW,OAC/DC,EAAaH,EAAiBA,EAAeE,MAAW,OAC9D,MAAM,GAAN,OAAUD,EAAV,YAAuBE,K,kCCNzB,mD,gLC0GYC,E,sQC7FNtB,GAAUC,WAAOC,IAAV,kDAIPqB,GAAqBtB,mBAAOuB,KAAPvB,CAAH,qOAGb,qBAAGE,MAAkBC,OAAOqB,QAQ3B,qBAAGtB,MAAkBC,OAAOsB,WAkCzBC,GA9B0C,SAAC,GAMnD,IALLC,EAKI,EALJA,eACAC,EAII,EAJJA,QACAC,EAGI,EAHJA,mBACAC,EAEI,EAFJA,QACAC,EACI,EADJA,gBAEQvB,EAAMC,eAAND,EAER,OACE,gBAACT,GAAD,WACE,gBAAC,KAAD,CAAMiC,eAAe,gBAArB,UACE,gBAAC,MAAD,WAAOxB,EAAE,SAAT,OACA,eAACc,GAAD,CAAoBW,KAAMF,EAA1B,SAA4CD,QAE5CF,GACA,gBAAC,KAAD,CAAMI,eAAe,gBAArB,UACE,gBAAC,MAAD,WAAOxB,EAAE,mBAAT,OACA,eAAC,MAAD,UAAOqB,OAGX,eAAC,KAAD,CAAMG,eAAe,aAArB,SACE,eAAC,KAAD,CAAME,UAAQ,EAACD,KAAMN,EAAgBd,MAAM,EAA3C,SACGL,EAAE,2B,UCzCPT,GAAUC,mBAAOmC,KAAPnC,CAAH,mEAMPoC,GAAgBpC,mBAAOqC,MAAPrC,CAAH,2FAER,qBAAGE,MAAkBC,OAAOmC,QACjB,qBAAGpC,MAAkBC,OAAOqB,QAyBnCe,GAtBuC,SAAC,GAOhD,IANLT,EAMI,EANJA,QACAU,EAKI,EALJA,WACAC,EAII,EAJJA,iBACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,YACAC,EACI,EADJA,SAEA,OACE,gBAAC,GAAD,CAASZ,eAAe,gBAAgBa,WAAW,SAASC,GAAG,OAA/D,UACE,eAAC,KAAD,CAAOC,IAAG,wBAAmBL,EAAWM,oBAA9B,QAAyDC,IAAKN,EAAaO,MAAO,GAAIC,OAAQ,KACxG,gBAAC,KAAD,CAAMC,cAAc,SAASP,WAAW,WAAxC,UACE,eAAC,KAAD,CAASC,GAAG,MAAZ,SAAmBhB,EAAQuB,MAAM,KAAK,KACtC,gBAAC,KAAD,CAAMrB,eAAe,SAArB,UACGS,EAAmB,eAAC,KAAD,IAAmB,eAAC,KAAD,CAASG,SAAUA,IAC1D,eAACR,GAAD,CAAekB,QAAQ,YAAvB,SAAoCd,c,0GCgC/Be,GAzDmC,SAAC,GAAoE,IAAlEC,EAAiE,EAAjEA,IAAKC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,UAAiD,IAAtCC,iBAAsC,MAA1B,GAA0B,EAAtB5B,EAAsB,EAAtBA,gBAC9F,EAAsB6B,oBAAS,IAA/B,oBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,qBAAS,GAA3C,oBAAOG,EAAP,KAAkBC,EAAlB,KACQxD,EAAMC,eAAND,EACFyD,EAAcC,oBAAQ,WAC1B,OAAOC,aAAsBX,KAC5B,CAACA,IAEEY,EAAeC,wBACnB,SAACC,GACCR,EAAOQ,EAAEC,cAAcC,SAEzB,CAACV,IAGGW,EAAkBJ,wBAAY,WAClCP,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,gBAAC,KAAD,CACEY,MAAqB,QAAdf,EAAsBnD,EAAE,mBAAoB,CAAEmE,OAAQhB,IAAenD,EAAE,qBAC9EkD,UAAWA,EAFb,UAIE,eAACkB,GAAA,EAAD,CACEJ,MAAOX,EACPgB,YAAaJ,EACbK,SAAUV,EACVZ,IAAKS,EACLU,OAAQhB,EACR5B,gBAAiBA,EACjBgD,WAAYvE,EAAE,WAEhB,gBAACwE,GAAA,EAAD,WACE,eAAC,KAAD,CAAQ1B,QAAQ,YAAYhD,QAASoD,EAAWR,MAAM,OAAtD,SACG1C,EAAE,YAEL,eAAC,KAAD,CACE0C,MAAM,OACN+B,SAAUlB,GAA6B,MAAhBE,GAA+B,MAARJ,EAC9CvD,QAAO,wBAAE,uBAAA4E,EAAA,6DACPlB,GAAa,GADN,SAEDP,EAAUI,GAFT,OAGPG,GAAa,GACbN,IAJO,2CAHX,SAUelD,EAAZuD,EAAc,uBAA4B,gBAG/C,eAAC,KAAD,CAAc9B,KAAMF,EAAiBoD,MAAO,CAAEC,UAAW,UAAzD,SACG5E,EAAE,eAAgB,CAAEmE,OAAQhB,UCCtB0B,GArDqC,SAAC,GAAmD,IAAjD5B,EAAgD,EAAhDA,UAAWC,EAAqC,EAArCA,UAAWF,EAA0B,EAA1BA,IAA0B,IAArBG,iBAAqB,MAAT,GAAS,EACrG,EAAsBC,oBAAS,IAA/B,oBAAOC,EAAP,KAAYC,EAAZ,KACA,EAAkCF,qBAAS,GAA3C,oBAAOG,EAAP,KAAkBC,EAAlB,KACQxD,EAAMC,eAAND,EACFyD,EAAcC,oBAAQ,WAC1B,OAAOC,aAAsBX,KAC5B,CAACA,IAEEY,EAAeC,wBACnB,SAACC,GACCR,EAAOQ,EAAEC,cAAcC,SAEzB,CAACV,IAGGW,EAAkBJ,wBAAY,WAClCP,EAAOG,KACN,CAACA,EAAaH,IAEjB,OACE,gBAAC,KAAD,CACEY,MAAqB,QAAdf,EAAsBnD,EAAE,oBAAqB,CAAEmE,OAAQhB,IAAenD,EAAE,sBAC/EkD,UAAWA,EAFb,UAIE,eAACkB,GAAA,EAAD,CACEC,YAAaJ,EACbK,SAAUV,EACVI,MAAOX,EACPL,IAAKS,EACLU,OAAQhB,EACRoB,WAAYvE,EAAE,aAEhB,gBAACwE,GAAA,EAAD,WACE,eAAC,KAAD,CAAQ1B,QAAQ,YAAYhD,QAASoD,EAAWR,MAAM,OAAtD,SACG1C,EAAE,YAEL,eAAC,KAAD,CACEyE,SAAUlB,EACVzD,QAAO,wBAAE,uBAAA4E,EAAA,6DACPlB,GAAa,GADN,SAEDP,EAAUI,GAFT,OAGPG,GAAa,GACbN,IAJO,2CAMTR,MAAM,OARR,SAUe1C,EAAZuD,EAAc,uBAA4B,oBCxC/CuB,GAAoBtF,WAAOC,IAAV,+EAqDRsF,GA9CsC,SAAC,GAO/C,IANLC,EAMI,EANJA,cACAC,EAKI,EALJA,aACA9B,EAII,EAJJA,UAEA5B,EAEI,EAFJA,gBACA2D,EACI,EADJA,MAEQlF,EAAMC,eAAND,EACAmF,EAAYC,aAAcC,aAAWH,EAAMI,gBAAiBL,GAA5DE,QACAI,EAAcC,aAAgBH,aAAWH,EAAMI,gBAAiBN,GAAhEO,UAEFE,EAAmBC,aAAiBV,GAEpCW,EADoBD,aAAiBT,GACFW,iBAEzC,EAA2BC,cACzB,eAAC,GAAD,CAAc7C,IAAKiC,EAAchC,UAAWkC,EAAShC,UAAWA,EAAW5B,gBAAiBA,KADvFuE,EAAP,qBAGA,EAA4BD,cAC1B,eAAC,GAAD,CAAe7C,IAAKgC,EAAe/B,UAAWsC,EAAWpC,UAAWA,KAD/D4C,EAAP,qBAmBA,OACE,gBAAC,KAAD,CAAMvE,eAAe,gBAAgBa,WAAW,SAAhD,UACE,eAAC,KAAD,CAASjC,MAA4B,IAArBqF,EAAyB,eAAiB,OAA1D,SAAmEE,IAhBzC,IAArBF,EACL,eAAC,KAAD,CAAQ3F,QAASgG,EAAjB,SAAoC9F,EAAE,cAEtC,gBAAC8E,GAAD,WACE,eAAC,KAAD,CAAYhC,QAAQ,WAAWhD,QAASiG,EAAmBC,GAAG,MAA9D,SACE,eAAC,KAAD,CAAW5F,MAAM,UAAUsC,MAAM,WAEnC,eAAC,KAAD,CAAYI,QAAQ,WAAWhD,QAASgG,EAAxC,SACE,eAAC,KAAD,CAAS1F,MAAM,UAAUsC,MAAM,kB,qBCrDnCuD,GAAiBzG,WAAOC,IAAV,onBACJ,qBAAGC,MAAkBwG,QAAQC,cAGlC,qBAAGzG,MAAkBwG,QAAQlF,QAK3B,qBAAGtB,MAAkB0G,SAASC,SAcd,qBAAG3G,MAAkBwG,QAAQC,cAQpDG,GAAY9G,WAAOC,IAAV,oHAGHwG,GAAkCA,IAc/BM,GATwC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACjE,OACE,gBAACH,GAAD,WACGG,EACD,eAACR,GAAD,UAAiBO,QCFRE,GAhCwC,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAaC,EAAY,6BACzEC,EAAYC,eAAZD,QACA7G,EAAMC,eAAND,EACR,EAAkCoD,qBAAS,GAA3C,oBAAOG,EAAP,KAAkBC,EAAlB,KACQuD,EAAaC,aAAgB3B,aAAWuB,EAAMK,oBAA9CF,SAEFG,EAAqBL,EAAUnB,aAAiBiB,GAAY,EAC5DhB,EAAiBuB,EAAmBtB,iBAE1C,OACE,gBAAC,KAAD,CAAMtD,GAAG,MAAMd,eAAe,gBAAgBa,WAAW,SAAzD,UACE,eAAC,KAAD,CAASjC,MAA8B,IAAvB8G,EAA2B,eAAiB,OAA5D,SAAqEvB,IACrE,eAAC,GAAD,CACEa,QAASxG,EACP,iMAFJ,SAKE,eAAC,KAAD,CACEyE,SAAUlB,EACVzD,QAAO,wBAAE,uBAAA4E,EAAA,6DACPlB,GAAa,GADN,SAEDuD,IAFC,OAGPvD,GAAa,GAHN,2CAFX,SAQGxD,EAAE,oBC1BPmH,GAAS3H,WAAOC,IAAV,mDAGN2H,GAAqB5H,mBAAO6H,KAAP7H,CAAH,uFAKlB8H,GAAe9H,mBAAO+H,KAAP/H,CAAH,gDAqFHgI,GAtEsC,SAAC,GAAyC,IAAvCtC,EAAsC,EAAtCA,MAAO2B,EAA+B,EAA/BA,QAAStF,EAAsB,EAAtBA,gBAC9DvB,EAAMC,eAAND,EACR,EAAkDoD,qBAAS,GAA3D,oBAAOqE,EAAP,KAA0BC,EAA1B,KACA,EAA6BC,aAAmBzC,EAAM0C,UAA9CC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,YACb,EAA6DC,aAAaF,EAAK3C,EAAM9C,UAA7E4F,EAAR,EAAQA,UAAW/C,EAAnB,EAAmBA,aAAcD,EAAjC,EAAiCA,cAAe2B,EAAhD,EAAgDA,SAC5CsB,EAAY5C,aAAWyC,GAEvB5C,EAAMgD,WACRD,EAAY/C,EAAMiD,MAAMC,QAAQC,OAElC,IAAMC,EAASpD,EAAM0C,SAASW,cACxBC,EAAa3B,GAAWmB,GAAaA,EAAUS,cAAc,GAC7DC,EAAOC,eAEPC,EAAaC,aAAiBZ,EAAWS,GAEvCI,EAAcC,aAAgBH,EAAYvD,aAAWH,EAAMI,iBAA3DwD,UAEFE,EAAgBnF,uBAAW,wBAAC,uBAAAa,EAAA,sEAE9BgD,GAAqB,GAFS,SAGxBoB,IAHwB,OAI9BpB,GAAqB,GAJS,gDAM9BuB,QAAQC,MAAR,MAN8B,yDAQ/B,CAACJ,IAmBJ,OACE,gBAAC3B,GAAD,WACE,gBAAC,KAAD,WACE,eAAC,MAAD,CAAM9G,MAAI,EAAC8I,cAAc,YAAY/I,MAAM,aAAagJ,SAAS,OAAOC,GAAG,MAA3E,SAEGf,IAEH,eAAC,MAAD,CAAMjI,MAAI,EAAC8I,cAAc,YAAY/I,MAAM,aAAagJ,SAAS,OAAjE,SACGpJ,EAAE,2BAGP,eAAC,GAAD,cAAe2G,SAAUA,EAAUkB,IAAKA,GAAS3C,IACjD,eAAC,KAAD,UAIE,eAAC,MAAD,CAAM7E,MAAI,EAAC8I,cAAc,YAAY/I,MAAM,aAAagJ,SAAS,OAAjE,SACGpJ,EAAE,qCAGL6G,EApCG2B,EACL,eAAC,GAAD,CACExD,cAAeA,EACfC,aAAcA,EACd9B,UAAWmF,EACXT,IAAKA,EACLtG,gBAAiBA,EACjB2D,MAAOA,IAGT,eAACoC,GAAD,CAAcgC,GAAG,MAAM5G,MAAM,OAAO+B,SAAUgD,EAAmB3H,QAASkJ,EAA1E,SACGhJ,EAAE,sBAyBO,eAACoH,GAAD,CAAoBkC,GAAG,MAAM5G,MAAM,aCnF/C6G,GAAeC,qBAAH,+KAYZC,GAAmBjK,WAAOC,IAAV,2nBAgBP8J,IAWTG,GAAQlK,WAAOC,IAAV,6UAEK,SAACmH,GAAD,OAAWA,EAAMlH,MAAMoC,KAAKqE,cAWtCwD,GAAUnK,WAAOC,IAAV,6GACS,qBAAGC,MAAkBC,OAAOiK,eAM5CC,GAAmBrK,WAAOC,IAAV,kEACV,SAACmH,GAAD,OAAYA,EAAM7G,SAAW,OAAS,SAG5C+J,GAAatK,mBAAOuK,MAAPvK,CAAH,4CACL,qBAAGE,MAAkBC,OAAOqK,gBAqFxBC,GA1E6B,SAAC,GAAiC,IAA/B/E,EAA8B,EAA9BA,MAAO9D,EAAuB,EAAvBA,QAASyF,EAAc,EAAdA,QACrD7G,EAAMC,eAAND,EAER,EAA0DoD,qBAAS,GAAnE,oBAAO8G,EAAP,KAA8BC,EAA9B,KAEMlI,EAAmBmI,KAAgBC,SAASnF,EAAMiD,MAAMhE,QAGxDjC,EAAagD,EAAM0C,SAAS/E,MAAM,KAAK,GAAGL,oBAE1CnB,EAAqB6D,EAAMoF,UAAN,WACnBpF,EAAMoF,UAAUC,WAAW3E,oBAAe4E,EAAW,CAAEC,sBAAuB,KAClF,IAEEnJ,EAAU4D,EAAM0C,UAAY1C,EAAM0C,SAASW,cAAcmC,QAAQ,SAAU,IAC3EC,EAAYzF,EAAM0C,SAElBgD,EAAW1F,EAAM2F,KAAO3F,EAAM2F,IAAIjF,eAAe,QAAS,CAAE6E,sBAAuB,IAEnFK,EAAwBvK,aAAyB,CACrDC,mBAAoB0E,EAAM6F,WAAW3C,QACrC3H,eAAgByE,EAAMiD,MAAMC,UAExB7G,EAAe,UAAMyJ,KAAN,YAAgCF,GAErD,OACE,gBAACpB,GAAD,WACG,CAAC,OAAOW,SAASnF,EAAMiD,MAAMhE,SAAW,eAACsF,GAAD,IACzC,eAAC,GAAD,CACEnI,QAASA,EACTU,WAAYkD,EAAMlD,WAClBC,iBAAkBA,EAClBC,WAAYA,EACZC,YAAa+C,EAAMiD,MAAMhE,OACzB/B,SAAU8C,EAAM9C,YAEhBhB,GACA,gBAAC,KAAD,CAAMI,eAAe,gBAAgBa,WAAW,SAAhD,UACE,gBAACyH,GAAD,WAAa9J,EAAE,OAAf,OACA,eAAC,MAAD,CAAMK,MAAI,EAACsE,MAAO,CAAEsG,QAAS,OAAQ5I,WAAY,UAAjD,SACG6C,EAAM2F,IACL,uCAEGD,EAFH,OAKA,eAAC,MAAD,CAAUjI,OAAQ,GAAID,MAAO,UAKrC,gBAAC,KAAD,CAAMlB,eAAe,gBAArB,UACE,gBAACsI,GAAD,WAAa9J,EAAE,UAAf,OACA,eAAC,MAAD,CAAMK,MAAI,EAAV,SAAYsK,OAEd,eAACO,GAAD,CAAsBhG,MAAOA,EAAO2B,QAASA,EAAStF,gBAAiBA,IACvE,eAACoI,GAAD,IACA,eAAC9J,GAAA,EAAD,CACEC,QAAS,kBAAMqK,GAA0BD,IACzCnK,SAAUmK,IAEZ,eAACL,GAAD,CAAkB9J,SAAUmK,EAA5B,SACE,eAAC,GAAD,CACE9I,QAASA,EACTD,eAAc,sCAAiC+D,EAAM4C,YAAYO,OACjEhH,mBAAoBA,EACpBC,QAASA,EACTC,gBAAiBA,UC9IrB+E,GAAY9G,WAAOC,IAAV,6MAGJ,qBAAGC,MAAkBC,OAAOqB,QAQvB,qBAAGtB,MAAkBC,OAAOC,cAMtCuL,GAAa3L,WAAOC,IAAV,gGAmCD2L,GA7BiB,SAAC,GAS1B,IARLpH,EAQI,EARJA,MAKAqH,EAGI,EAHJA,cAIQrL,EAAMC,eAAND,EAGR,OACE,eAAC,GAAD,UACGqL,EACC,qCACE,gBAACF,GAAD,WAAanH,EAAb,SAMF,eAACmH,GAAD,UAAanL,EAAE,mBCpDjBsL,GAAY9L,mBAAO+L,KAAP/L,CAAH,mHAIX,qBAAGE,MAAkB8L,aAAaC,MAMhCnF,GAAY9G,WAAOC,IAAV,uIAKX,qBAAGC,MAAkB8L,aAAaC,MAkCvBC,GA7BoC,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAO9D,EAAoB,EAApBA,IAAKzF,EAAe,EAAfA,SACxD4C,EAAkB+C,aAAaF,EAAKzF,GAApC4C,cACAhF,EAAMC,eAAND,EACFyF,EAAmBC,aAAiBV,GAc1C,OACE,gBAAC,GAAD,WAEE,eAACsG,GAAD,CAAW/I,IAAG,wBAAmBoJ,EAAMnJ,oBAAzB,QAAoDC,IAAI,OAAOC,MAAO,GAAIC,OAAQ,GAAIqD,GAAG,QACvG,iCAfEP,EAEA,eAAC,MAAD,CAAMrF,MAAM,YAAYgJ,SAAS,OAAO/I,MAAI,EAA5C,SACGL,EAAE,YAKF,KASH,eAAC,MAAD,CAAMK,MAAI,EAAV,SAAYsL,WChDdC,GAASpM,WAAOqM,KAAV,sFACD,gBAAGC,EAAH,EAAGA,OAAQpM,EAAX,EAAWA,MAAX,OAAwBoM,EAASpM,EAAMC,OAAOqB,KAAOtB,EAAMC,OAAOqK,gBAY9D+B,GAPsC,SAAC,GAAkB,IAAhBpF,EAAe,EAAfA,SAC9CE,EAAYC,eAAZD,QACFlB,EAA8B,OAAbgB,GAAqBE,EAAUF,EAASf,iBAAmB,IAElF,OAAO,eAACgG,GAAD,CAAQE,OAAQnF,EAAhB,SAA2BhB,KCV9BW,GAAY9G,WAAOC,IAAV,4KAKJ,qBAAGC,MAAkBC,OAAOsB,WAEnC,qBAAGvB,MAAkB8L,aAAaC,MAKhCO,GAAYxM,mBAAOyM,KAAPzM,CAAH,iEACA,qBAAG0M,QAAyB,iBAAmB,eAiB/CC,GAbyB,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,mBAEnCC,GADWC,gBAATC,KAEAvM,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,YACIqM,GAAYrM,EAAE,WAChB,eAACgM,GAAD,CAAW5L,MAAM,UAAU8L,QAASE,QCvBpCI,GAAoBhN,WAAOC,IAAV,wJACZ,qBAAGC,MAAkBC,OAAOqB,QAKnC,qBAAGtB,MAAkB8L,aAAaC,MAKhCnF,GAAY9G,WAAOC,IAAV,wKAQX,qBAAGC,MAAkB8L,aAAaC,MAgCvBgB,GAzB8C,SAAC,GAAoB,IAAlBzK,EAAiB,EAAjBA,WACxD0K,EAAmB1K,EAAaA,EAAW2K,cAAgB,IAGjE,OACE,eAAC,GAAD,UACE,eAACH,GAAD,UAAoBE,OChCpBE,GAAmBpN,WAAOC,IAAV,oIAKlB,qBAAGC,MAAkB8L,aAAaC,MAKhCnF,GAAY9G,WAAOC,IAAV,wKAQX,qBAAGC,MAAkB8L,aAAaC,MAyBvBoB,GAlB4C,SAAC,GAAmB,IAAjBvC,EAAgB,EAAhBA,UACtDwC,EAAmBxC,EAAS,WAC1ByC,OAAOzC,GAAW1E,oBAAe4E,EAAW,CAAEC,sBAAuB,KACzE,IACIzK,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,WACE,eAAC4M,GAAD,UACE,eAAC,MAAD,UAAOE,MAET,eAAC,GAAD,CAAStG,QAASxG,EAAE,gEAApB,SACE,eAAC,KAAD,CAAUI,MAAM,qB,UC9CX4M,GAAkBxN,WAAOC,IAAV,yXAEN,qBAAGC,MAAkBC,OAAOsN,SAM9C,qBAAGvN,MAAkB8L,aAAaC,MAOlC,qBAAG/L,MAAkB8L,aAAa0B,MAQzBC,GAAe3N,WAAOC,IAAV,6FAMZ2N,GAAQ5N,WAAOqM,KAAV,4CACP,qBAAGnM,MAAkBC,OAAO0N,aAG1BC,GAAS9N,WAAOqM,KAAV,4CACR,qBAAGnM,MAAkBC,OAAOC,cAG1B2N,GAAgB/N,WAAOC,IAAV,0GAKbsM,GAASvM,WAAOC,IAAV,qFAGR,qBAAGC,MAAkBC,OAAOqB,QAG1BwM,GAAShO,WAAOC,IAAV,gEAER,qBAAGC,MAAkBC,OAAOC,cC6BxB8G,GAlEsD,SAAC,GAA4B,IAA1B+G,EAAyB,EAAzBA,SAAa7G,EAAY,6BACvFC,EAAYC,eAAZD,QACF6G,EAASC,eACTC,EAAoBH,GAAY5G,EAAU,IAAIgH,KAAUJ,EAAS9G,UAAY,KAC/EA,EAAW,KACXmH,EAAe,EACfnI,EAAiB,IAErB,GAAIiI,EAAmB,CACrB,IAAMG,EAAqBL,EAAO9G,EAAMmE,WAAW5G,OAAOwI,eACpDqB,EAAiB,IAAIH,KAAUjH,EAAMqH,qBAAqBC,MAAMH,GAChEI,EAAU,IAAIN,KAAUG,GAAgBvO,IAAImH,EAAMwH,cACxDzH,EAAWjB,aAAiBkI,GAC5BE,EAAe,IAAID,KAAUlH,GAAU0H,aAAazH,EAAMsB,SAAW6F,EAAqBI,GAAS5D,WACnG5E,EAAiBgB,EAASf,iBAG5B,MAAkCxC,qBAAS,GAA3C,oBAAOG,EAAP,KAAkBC,EAAlB,KACQuD,EAAaC,aAAgB3B,aAAWuB,EAAMK,oBAA9CF,SACA/G,EAAMC,eAAND,EAER,EAA4BsO,sBAAW,CACrCC,MAAO,EACPC,IAAKV,EACLW,SAAU,EACVC,UAAW,IACXC,SAAU,IALJC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAOXC,EAAcC,kBAAOF,GAM3B,OAJAG,sBAAU,WACRF,EAAYG,QAAQnB,KACnB,CAACA,EAAcgB,IAGhB,gBAAC9B,GAAD,WACE,eAACG,GAAD,UACE,eAACC,GAAD,UAAQpN,EAAE,0BAEZ,gBAACuN,GAAD,WACE,iCACE,eAAC,GAAD,UAAS5H,IACT,gBAAC,GAAD,eAAUiJ,EAAV,aAEF,eAAC,GAAD,CACEpI,QAASxG,EACP,iMAFJ,SAKE,eAAC,KAAD,CACEyE,SAAUlB,IAAcsD,EACxB/G,QAAO,wBAAE,uBAAA4E,EAAA,6DACPlB,GAAa,GADN,SAEDuD,IAFC,OAGPvD,GAAa,GAHN,2CAKT0L,GAAG,MAPL,SASGlP,EAAE,uBCjDT8E,GAAoBtF,WAAOC,IAAV,+CAsJR+N,GAlJ+C,SAAC,GAOxD,IAUDM,EACAnI,EAjBJkC,EAMI,EANJA,IACAD,EAKI,EALJA,SACAE,EAII,EAJJA,YACAiD,EAGI,EAHJA,WACA5C,EAEI,EAFJA,MACGvB,EACC,sEACI5G,EAAMC,eAAND,EACA6G,EAAYC,eAAZD,QACF6G,EAASC,eACf,EAAkDvK,qBAAS,GAA3D,oBAAOqE,EAAP,KAA0BC,EAA1B,KACA,EAAmDK,aAAaF,EAAKjB,EAAMxE,UAAnE4F,EAAR,EAAQA,UAAW/C,EAAnB,EAAmBA,aAAcD,EAAjC,EAAiCA,cACzBG,EAAYC,aAAcC,aAAWuB,EAAMtB,gBAAiBL,GAA5DE,QACAI,EAAcC,aAAgBH,aAAWuB,EAAMtB,gBAAiBN,GAAhEO,UACFmD,EAAOC,eAKPH,EAA0B,SAAbZ,GAA6Bf,GAAWmB,GAAaA,EAAUS,cAAc,GAE5FR,EAAYH,EAAYO,MACxBzB,EAAMsB,WACRD,EAAYE,EAAMC,QAAQC,OAE5B,IAAMyC,EAAwBvK,aAAyB,CACrDC,mBAAoBuK,EAAW3C,QAC/B3H,eAAgB0H,EAAMC,UAElB7G,EAAe,UAAMyJ,KAAN,YAAgCF,GAC/CrF,EAAmBC,aAAiBV,GACpCmK,EAAiBzJ,aAAiBT,GAElC8I,EAAqBL,EAAO3C,EAAW5G,OAAOwI,eAC9CqB,EAAiB,IAAIH,KAAUjH,EAAMqH,qBAAqBC,MAAMH,GAElEI,EAAU,IAAIN,KAAU,GAE1BM,EADEvH,EAAMsB,SACE,IAAI2F,KAAUH,EAAoB,SAAb9F,EAAsB,QAAUA,EAAS+E,gBAE9D,IAAIkB,KAAUG,GAAgBvO,IAAImH,EAAMwH,cAGpDN,EAAe,IAAID,KAAUsB,GAAgBd,aAAaF,GAAS5D,WACnE5E,EAAiBwJ,EAAevJ,iBAEhC,MAA4B0I,sBAAW,CACrCC,MAAO,EACPC,IAAKV,EACLW,SAAU,EACVC,UAAW,IACXC,SAAU,IALJC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAOXC,EAAcC,kBAAOF,GAE3BG,sBAAU,WACRF,EAAYG,QAAQnB,KACnB,CAACA,EAAcgB,IAElB,MAA2BjJ,cACzB,eAAC,GAAD,CAAc7C,IAAKiC,EAAchC,UAAWkC,EAAShC,UAAWyE,EAAUrG,gBAAiBA,KADtFuE,EAAP,qBAGA,EAA4BD,cAAS,eAAC,GAAD,CAAe7C,IAAKgC,EAAe/B,UAAWsC,EAAWpC,UAAWyE,KAAlG7B,EAAP,qBAEM6C,EAAaC,aAAiBZ,EAAWS,GAEvCI,EAAcC,aAAgBH,EAAYvD,aAAWuB,EAAMtB,iBAA3DwD,UAEFE,EAAgBnF,uBAAW,wBAAC,uBAAAa,EAAA,sEAE9BgD,GAAqB,GAFS,SAGxBoB,IAHwB,OAI9BpB,GAAqB,GAJS,gDAM9BuB,QAAQC,MAAR,MAN8B,yDAQ/B,CAACJ,IAEJ,OAAKjC,EAaD2B,EACE/C,EAEA,gBAACuH,GAAD,WACE,eAACG,GAAD,UAEE,eAACG,GAAD,UAAStN,EAAE,qCAEb,gBAACuN,GAAD,WACE,iCACE,eAAC,GAAD,UAAS5H,IACT,gBAAC,GAAD,eAAYiJ,EAAZ,aAEF,gBAAC,GAAD,WACE,eAAC,KAAD,CAAY9L,QAAQ,YAAYhD,QAASiG,EAAmBC,GAAG,MAA/D,SACE,eAAC,KAAD,CAAW5F,MAAM,UAAUsC,MAAM,WAEnC,eAAC,KAAD,CAAYI,QAAQ,YAAYhD,QAASgG,EAAzC,SACE,eAAC,KAAD,CAAS1F,MAAM,UAAUsC,MAAM,oBASzC,gBAACsK,GAAD,WACE,eAACG,GAAD,UACE,gBAACG,GAAD,WAAStN,EAAE,mBAAoB,CAAEmE,OAAQyD,IAAzC,SAEF,eAAC2F,GAAD,UACE,eAAC,KAAD,CAAQ7K,MAAM,OAAO5C,QAASgG,EAAkBhD,QAAQ,YAAxD,SACgB,QAAb8E,EAAqB5H,EAAE,mBAAoB,CAAEmE,OAAQyD,IAAc5H,EAAE,qBAQ9E,gBAACgN,GAAD,WACE,eAACG,GAAD,UACE,eAACG,GAAD,UAAStN,EAAE,oBAEb,eAACuN,GAAD,UACE,eAAC,KAAD,CAAQ7K,MAAM,OAAO+B,SAAUgD,EAAmB3H,QAASkJ,EAAelG,QAAQ,YAAlF,SACG9C,EAAE,iBA1DP,gBAACgN,GAAD,WACE,eAACG,GAAD,UACE,eAACG,GAAD,UAAStN,EAAE,qBAEb,eAACuN,GAAD,UACE,eAAClG,GAAA,EAAD,CAAc3E,MAAM,eC5FxB4D,GAAY9G,WAAOC,IAAV,2MACC,qBAAGC,MAAkBC,OAAOwG,cAMxC,qBAAGzG,MAAkB8L,aAAa4D,MAMhCtO,GAAqBtB,mBAAOuB,KAAPvB,CAAH,iEAEb,qBAAGE,MAAkBC,OAAOC,cAGjCyP,GAAiB7P,WAAOC,IAAV,2KACT,qBAAGC,MAAkBC,OAAOqB,QAKnC,qBAAGtB,MAAkB8L,aAAaC,MAKhC6D,GAAgB9P,WAAOC,IAAV,mRAKf,qBAAGC,MAAkB8L,aAAaC,MAgBhCuB,GAAkBxN,WAAOC,IAAV,qLAIjB,qBAAGC,MAAkB8L,aAAaC,MAQhC8D,GAAgB/P,WAAOC,IAAV,kDAIb+P,GAAiBhQ,WAAOC,IAAV,oFAGhB,qBAAGC,MAAkB8L,aAAa4D,MAKhCK,GAAejQ,WAAOC,IAAV,8HAgEHiQ,GAzDgD,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,IAAKtF,EAAgB,EAAhBA,UACxEpF,EAAQyK,EAEN3P,EAAMC,eAAND,EACA+K,EAA4B7F,EAA5B6F,WAAY5C,EAAgBjD,EAAhBiD,MAAO0H,EAAS3K,EAAT2K,KACrBvO,EAAU4D,EAAM0C,UAAY1C,EAAM0C,SAASW,cAAcmC,QAAQ,SAAU,IAC3EI,EAAwBvK,aAAyB,CACrDC,mBAAoBuK,EAAW3C,QAC/B3H,eAAgB0H,EAAMC,UAGlBH,EAAY/C,EAAMgD,SACpBhD,EAAMiD,MAAMC,QAAQC,MACpBnD,EAAM4C,YAAYO,MAChByH,EAAe5K,EAAMgD,SAAN,2DACmCD,GADnC,2CAEmB6C,GAElCiF,EAAG,2CAAuC9H,GAC1C+H,EAAI,0CAAsC9K,EAAMgD,SAAW,QAAU,OAAjE,YAA2ED,GAC/EhG,EAAmBmI,KAAgBC,SAASlC,EAAMhE,QAExD,OACE,gBAAC,GAAD,WACE,gBAACoL,GAAD,WACE,eAACF,GAAD,UACE,eAAC,GAAD,CAAoB5N,KAAMqO,EAA1B,SAAyC9P,EAAE,eAAgB,CAAEmE,OAAQ7C,QAEvE,eAAC,GAAD,CAAoBG,KAAMsO,EAA1B,SAAgC/P,EAAE,mBAClC,eAAC,GAAD,CAAoByB,KAAMuO,EAA1B,SAAiC9K,EAAMgD,SAAWlI,EAAE,kBAAoBA,EAAE,mBAC1E,gBAACsP,GAAD,WACGrN,EAAmB,eAAC,KAAD,IAAmB,eAAC,KAAD,CAASG,SAAU8C,EAAM9C,WAC/DyN,EAAO,eAAC,KAAD,IAAc,WAG1B,gBAACL,GAAD,WACE,gBAACC,GAAD,WACE,eAAC,MAAD,UAAOzP,EAAE,SACT,eAAC,GAAD,gBAAS4P,OAMX,gBAACH,GAAD,WACE,eAAC,MAAD,UAAOzP,EAAE,eACT,eAAC,GAAD,gBAAesK,UAGnB,gBAAC,GAAD,WACE,eAAC,GAAD,gBAAmBpF,IACnB,eAAC+K,GAAD,gBAAkB/K,WCvJpBgL,GAAQ1Q,WAAOC,IAAV,qFAEA,qBAAGC,MAAkBC,OAAOC,cAIjCuQ,GAAmB3Q,WAAOC,IAAV,4FAmBP2Q,GAT+B,SAAC,GAA8B,IAAD,IAA3BzE,aAA2B,MAAnB,GAAmB,EAAflF,EAAe,EAAfA,SAC3D,OACE,iCACGkF,GAAS,eAACuE,GAAD,UAAQvE,IAClB,eAACwE,GAAD,UAAmB1J,QpBOZ4J,GAAwC,CACnD,CACEC,GAAI,EACJC,KAAM,OACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,IAET,CACE2E,GAAI,EACJC,KAAM,SACNC,cAAe,KACfC,UAAU,EACV9E,MAAO,sBAET,CACE2E,GAAI,EACJC,KAAM,MACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,OAET,CACE2E,GAAI,EACJC,KAAM,UACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,KAIE+E,GAAyC,CACpD,CACEJ,GAAI,EACJC,KAAM,OACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,IAET,CACE2E,GAAI,EACJC,KAAM,aACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,YAET,CACE2E,GAAI,EACJC,KAAM,SACNC,cAAe,KACfC,UAAU,EACV9E,MAAO,sBAET,CACE2E,GAAI,EACJC,KAAM,MACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,OAET,CACE2E,GAAI,EACJC,KAAM,YACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,aAET,CACE2E,GAAI,EACJC,KAAM,UACNC,cAAe,IACfC,UAAU,EACV9E,MAAO,M,SAIC9K,K,cAAAA,E,aAAAA,M,KqBjFZ,I,uFAAM8P,GAAQ,CACZf,IAAKxE,GACLwF,KAAMlF,GACNI,OAAQC,GACR4D,QAASxD,GACTnK,WAAYyK,GACZnC,UAAWuC,IAGPgE,GAAYrR,WAAOC,IAAV,8KAOX,qBAAGC,MAAkB8L,aAAa0B,MAKhC4D,GAAWtR,WAAOuR,GAAV,kFAEe,qBAAGrR,MAAkBC,OAAOiK,eAGnDoH,GAAmBxR,WAAOyR,GAAV,2DAIhBC,GAAgB1R,WAAOyR,GAAV,4EAKbE,GAAkB3R,WAAOyR,GAAV,mDAkHNG,GA9GgC,SAACxK,GAC9C,IAAQ+I,EAAY/I,EAAZ+I,QACR,EAAoDvM,qBAAS,GAA7D,oBAAOgJ,EAAP,KAA2BiF,EAA3B,KACQrR,EAAMC,eAAND,EAEFsR,EAAoB,WACxBD,GAAuBjF,IAGzB,EAAuBE,gBAAfC,EAAR,EAAQA,KAAMgF,EAAd,EAAcA,KAERlF,GAAYE,EACZiF,EAAcnF,EAAWgE,GAAqBK,GAC9Ce,EAAcD,EAAYE,KAAI,SAACC,GAAD,OAAYA,EAAOpB,QAmFvD,OACE,uCAjFKgB,EA+CH,gBAACT,GAAD,CAAUhR,QAASwR,EAAnB,UACE,gCACE,8BACE,eAACH,GAAD,UACE,eAAC,GAAD,UACE,eAAC,GAAD,gBAAWvK,EAAMgK,aAIvB,gCACE,eAACI,GAAD,UACE,eAAC,GAAD,CAAYrF,MAAO3L,EAAE,sBAArB,SACE,eAAC,GAAD,gBAAY4G,EAAMkF,aAGtB,eAACoF,GAAD,UACE,eAAC,GAAD,CAAYvF,MAAO3L,EAAE,OAArB,SACE,eAAC,GAAD,6BAAS4G,EAAMgJ,KAAf,IAAoBgC,YAAU,eAKtC,8BACE,eAACf,GAAD,UACE,eAAC,GAAD,UACE,eAAC,GAAD,CAASzE,mBAAoBA,aAtEnC,eAAC0E,GAAD,CAAUhR,QAASwR,EAAnB,SACGxS,OAAOC,KAAK6H,GAAO8K,KAAI,SAAChT,GACvB,IAAMmT,EAAcJ,EAAYxS,QAAQP,GACxC,IAAqB,IAAjBmT,EACF,OAAO,KAGT,OAAQnT,GACN,IAAK,UACH,OACE,8BACE,eAACmS,GAAD,UACE,eAAC,GAAD,UACE,eAAC,GAAD,CAASzE,mBAAoBA,SAH1B1N,GAQb,IAAK,MACH,OACE,8BACE,eAACmS,GAAD,UACE,eAAC,GAAD,CAAYlF,MAAO3L,EAAE,OAArB,SACE,eAAC,GAAD,6BAAS4G,EAAMgJ,KAAf,IAAoBgC,WAAYvF,UAH7B3N,GAQb,QACE,OACE,8BACE,eAACmS,GAAD,UACE,eAAC,GAAD,CAAYlF,MAAO3L,EAAEwR,EAAYK,GAAalG,OAA9C,SACGmG,KAAMC,cAAcpB,GAAMjS,GAAMkI,EAAMlI,SAHpCA,SAmDpB0N,GAAsBuD,GACrB,8BACE,qBAAIqC,QAAS,EAAb,SACE,eAAC,GAAD,gBAAiBpL,YCzJvBN,GAAY9G,WAAOC,IAAV,gIACH,qBAAGC,MAAkBoC,KAAKmQ,cAEtB,qBAAGvS,MAAkBoC,KAAKqE,cAKpC+L,GAAe1S,WAAOC,IAAV,0GAQZ0S,GAAc3S,WAAO4S,MAAV,qKASXC,GAAY7S,WAAO8S,MAAV,sHASTC,GAAiB/S,WAAOC,IAAV,yDAKd+S,GAAwBhT,WAAOC,IAAV,0HA0CZgT,GAnC2B,SAAC7L,GACzC,IAAM8L,EAAiB3D,kBAAuB,MACtC/O,EAAMC,eAAND,EACA2S,EAAkB/L,EAAlB+L,KAAMC,EAAYhM,EAAZgM,QACNC,EAASC,cAASF,EAASD,EAAM,CAAElC,UAAU,EAAMsC,WAAY,SAA/DF,KAQR,OACE,eAAC,GAAD,UACE,gBAACN,GAAD,WACE,eAACL,GAAD,CAAcc,IAAKN,EAAnB,SACE,eAACP,GAAD,UACE,eAACE,GAAD,UACGQ,EAAKnB,KAAI,SAACuB,GACT,OAAO,yBAAC,GAAD,6BAASA,EAAIC,UAAb,IAAuBxU,IAAG,oBAAeuU,EAAI3C,gBAK5D,eAACkC,GAAD,UACE,gBAAC,KAAD,CAAQ1P,QAAQ,OAAOhD,QAnBX,WAClB4S,EAAezD,QAAQkE,eAAe,CACpCC,SAAU,YAiBN,UACGpT,EAAE,UACH,eAAC,KAAD,CAAeI,MAAM,uB,mBCvDlBiT,GAxBS,WACtB,MAAyBC,eAAjBC,EAAR,EAAQA,IAAKC,EAAb,EAAaA,QACLxT,EAAMC,eAAND,EAEFyT,EADaC,eAAXC,OACmB,GAAK,UAEhC,OACE,eAAC,GAAD,UACE,gBAAC,KAAD,CAAYC,YAAaJ,EAAU,EAAI,EAAGK,MAAM,KAAK/Q,QAAQ,UAA7D,UACE,eAAC,KAAD,CAAgBgR,GAAIC,KAAMC,GAAE,UAAKT,GAAO5O,MAAO,CAAEsP,aAAc,OAAQvR,MAAO,OAAQtC,MAAOqT,GAA7F,SACGzT,EAAE,UAEL,eAAC,KAAD,CACE8T,GAAIC,KACJC,GAAE,UAAKT,EAAL,YACF5O,MAAO,CAAEsP,aAAc,OAAQvR,MAAO,QAAStC,MAAOqT,GAHxD,SAKGzT,EAAE,oBASPT,GAAUC,WAAOC,IAAV,8MAUT,qBAAGC,MAAkB8L,aAAaC,MCtChCyI,GAAc1U,mBAAO2U,KAAP3U,CAAH,wHAQX4U,GAAe5U,WAAOC,IAAV,4GAEd,qBAAGC,MAAkB8L,aAAaC,MAMhCnF,GAAY9G,WAAOC,IAAV,6BA2BA4U,GApBsB,SAAC,GAAyB,IAAvBrQ,EAAsB,EAAtBA,MAAOM,EAAe,EAAfA,SAC7C,EAA8BlB,qBAAS,GAAvC,oBAAO8I,EAAP,KAAgBoI,EAAhB,KACMC,EAAUxF,kBAAO,MACf/O,EAAMC,eAAND,EAER,OACE,eAAC,GAAD,CAAWkM,QAASA,EAApB,SACE,eAACkI,GAAD,UACE,eAACF,GAAD,CACElB,IAAKuB,EACLvQ,MAAOA,EACPM,SAAUA,EACVkQ,YAAaxU,EAAE,iBACfyU,OAAQ,kBAAMH,GAAW,WCrC7BI,GAAiBlV,WAAOC,IAAV,iSAOJ,qBAAGC,MAAkBiV,QAAQC,SACvB,qBAAGlV,MAAkBC,OAAOkV,kBAElC,qBAAGnV,MAAkBC,OAAOsN,SAItC6H,GAAwBtV,WAAOC,IAAV,2SAKX,qBAAGC,MAAkBC,OAAOwG,cAC/B,qBAAGzG,MAAkB0G,SAAS2O,YAMvC,qBAAGrV,MAAkB8L,aAAaC,MAKhCuJ,GAAoBxV,WAAOC,IAAV,yUAEZ,qBAAGiD,SAEE,qBAAGhD,MAAkBC,OAAOsN,SAKxC,qBAAGvN,MAAkB8L,aAAaC,MAIlC,SAAC7E,GAAD,OACAA,EAAMqO,QACNC,eADA,kYAEIR,IAC2B,qBAAGhV,MAAkBC,OAAOkV,kBACzC,qBAAGnV,MAAkBwG,QAAQiP,YAI3CL,IAIoB,qBAAGpV,MAAkBC,OAAOkV,kBAGlC,qBAAGnV,MAAkBwG,QAAQiP,gBAY7CC,GAAe5V,WAAO6V,GAAV,wGAIL,qBAAG3V,MAAkB0G,SAAS2O,YAGrCO,GAAW9V,WAAO+V,GAAV,kHAII,qBAAG7V,MAAkBC,OAAOkV,kBA8D/BW,GAhDsC,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASnR,EAAe,EAAfA,SACzDoR,EAAe3G,kBAAO,MACtB4G,EAAc5G,kBAAO,MAC3B,EAA4B3L,qBAAS,GAArC,oBAAO6R,EAAP,KAAeW,EAAf,KACA,EAA4CxS,oBAASqS,EAAQ,IAA7D,oBAAOI,EAAP,KAAuBC,EAAvB,KACA,EAA0C1S,oBAAS,CAAEV,MAAO,EAAGC,OAAQ,IAAvE,oBAAOoT,EAAP,KAAsBC,EAAtB,KAEMC,EAAW,kBAAML,GAAWX,IAE5BiB,EAAkB,SAACC,GAAD,OAAyB,WAC/CL,EAAkBK,GAClBP,GAAU,GAENtR,GACFA,EAAS6R,KAWb,OAPAnH,sBAAU,WACRgH,EAAiB,CACftT,MAAOiT,EAAY1G,QAAQmH,YAC3BzT,OAAQgT,EAAY1G,QAAQoH,iBAE7B,IAGD,gBAACrB,GAAD,2BAAmBC,OAAQA,EAAQjC,IAAK0C,GAAkBK,GAA1D,cAC2B,IAAxBA,EAAcrT,OACb,eAACgS,GAAD,CAAgB5U,QAASmW,EAAzB,SACE,eAAC,MAAD,UAAOJ,EAAelK,UAG1B,eAAC,KAAD,CAAmBvL,MAAM,OAAON,QAASmW,IACzC,eAACnB,GAAD,UACE,eAACM,GAAD,CAAcpC,IAAK2C,EAAnB,SACGF,EAAQ/D,KAAI,SAACyE,GAAD,OACXA,EAAOxK,QAAUkK,EAAelK,MAC9B,eAAC2J,GAAD,CAAUxV,QAASoW,EAAgBC,GAAnC,SACE,eAAC,MAAD,UAAOA,EAAOxK,SADiCwK,EAAOxK,OAGtD,iBC1IV2K,GAAQ9M,qBAAH,6KAYL+M,GAAmB/W,WAAOC,IAAV,6NAGlB,qBAAGC,MAAkB8L,aAAa4D,MAQhCoH,GAAMhX,WAAOiX,IAAV,6GACMH,IAYAI,GARE,WACf,OACE,eAACH,GAAD,UACE,eAACC,GAAD,CAAKjU,IAAI,2BAA2BE,IAAI,WCJxCkU,GAAmBnX,WAAOC,IAAV,yQASlB,qBAAGC,MAAkB8L,aAAaC,MAOhCmL,GAAgBpX,WAAOC,IAAV,qIAKfsK,OAKE8M,GAAerX,WAAOC,IAAV,4KASZsK,OAKA+M,GAAkBtX,WAAOC,IAAV,iKAMjB,qBAAGC,MAAkB8L,aAAaC,MAMhCsL,GAAevX,WAAOC,IAAV,sSAWd,qBAAGC,MAAkB8L,aAAaC,MAUhCuL,GAAcxX,mBAAO+L,KAAP/L,CAAH,iGAMXyX,GAASzX,WAAOC,IAAV,uUAEI,qBAAGC,MAAkBC,OAAOuX,WAMxC,qBAAGxX,MAAkB8L,aAAaC,MAUhCnF,GAAY9G,WAAOC,IAAV,6BACT0X,GAAa3X,WAAOC,IAAV,6EAIV2X,GAAa5X,WAAOC,IAAV,4KAqTD4X,GAxSU,WACvB,IAAQC,EAAShE,eAATgE,KACAC,EAAaC,eAAbD,SACAvX,EAAMC,eAAND,EACFyX,EAAWC,eACXC,EAAWC,eACjB,EAA0BxU,oBAAS,IAAnC,oBAAOyU,EAAP,KAAcC,EAAd,KAEA,EAAgC1U,oBAASvC,EAASkX,OAAlD,oBAAOC,EAAP,KACQnR,GADR,KACoBC,eAAZD,SACF6B,EAAOC,eACb,EAAoCvF,oBAASpD,EAAE,QAA/C,oBAAOiY,EAAP,KAAmBC,EAAnB,KAEA,EAA4C9U,oBAAS,OAArD,oBAAO+U,EAAP,KACMzK,GADN,KACeC,gBAITyK,EAAWC,eACTC,EAAgBC,eAAhBD,YACRtJ,sBAAU,WACJnI,GACFuR,EAASI,aAAwB3R,EAAS6B,MAE3C,CAAC7B,EAAS6B,EAAM0P,EAAUE,IAC7B,MAAsClV,qBAAS,GAA/C,oBAAOqV,EAAP,KAAoBC,EAApB,KAEMC,EAAe,SAACzT,GACpB,IAAM6I,EAAqBL,EAAOxI,EAAM6F,WAAW5G,OAAOwI,eACpDiM,EAAqB,IAAI/K,KAAU3I,EAAM2T,uBAAuB3K,MAAMH,GACtE+K,EAAcnB,EAEpB,OADYoB,aAAY7T,EAAM8T,WAAYF,EAAaF,IAInDK,EAAexB,EAASyB,QAAO,SAAChU,GAAD,OAAmC,IAAxByT,EAAazT,MACvDiU,EAAiB1B,EAASyB,QAAO,SAAChU,GAAD,OAAmC,IAAxByT,EAAazT,MAEzDkU,EAAoBH,EAAaC,QACrC,SAAChU,GAAD,OAAWA,EAAMuI,UAAY,IAAII,KAAU3I,EAAMuI,SAASzI,eAAeyD,cAAc,MAsBnF4Q,EAAaxV,wBACjB,SAACyV,GACC,IAAIC,EAAiDD,EAAgB5H,KAAI,SAACxM,GACxE,IAAKA,EAAM2T,wBAA0BnL,EACnC,OAAOxI,EAGT,IAAM6I,EAAqBL,EAAOxI,EAAM6F,WAAW5G,OAAOwI,eACtDiM,EAAqB,IAAI/K,KAAU3I,EAAM2T,uBAAuB3K,MAAMH,GACtEC,EAAiB,IAAIH,KAAU3I,EAAM+I,qBAAqBC,MAAMH,GAC9DI,EAAU,IAAIN,KAAUG,GAAgBvO,IAAIyF,EAAMkJ,cACjC,QAAnBlJ,EAAM0C,WACRoG,EAAiB,IAAIH,KAAU3I,EAAMkJ,cAAcF,MAAMR,EAAOxI,EAAM0C,SAAS+E,gBAC/EiM,EAAqB,IAAI/K,KAAU3I,EAAMsU,gBAAgBtL,MAAMR,EAAOxI,EAAM0C,SAAS+E,iBAEvF,IAAMmM,EAAcpL,EAAO+L,IACrB5O,EAAMkO,aAAY7T,EAAM8T,WAAYF,EAAaF,EAAoB1T,EAAM9C,UACjF,OAAO,6BAAK8C,GAAZ,IAAmB2F,MAAKP,UAAW0D,EAAgBG,eAGrD,GAAI0J,EAAO,CACT,IAAM6B,EAAiB7B,EAAMlL,cAC7B4M,EAAyBA,EAAuBL,QAAO,SAAChU,GACtD,QAAIA,EAAM0C,SAAS+E,cAActC,SAASqP,MAO9C,OAAOH,IAET,CAAC7L,EAAQmK,IAOL8B,GAAYpC,EAASlN,SAAS,WAChCuP,EAAe,GASbC,GADND,GADAA,EAlEmB,SAACE,GAClB,OAAQ7B,GACN,IAAK,MACH,OAAO8B,mBAAQD,EAAQ,MAAO,QAOhC,IAAK,SACH,OAAOC,mBAAQD,GAAQ,SAAC5U,GAAD,OAAkCA,EAAMuI,SAAWvI,EAAMuI,SAAS9G,SAAW,IAAI,QAC1G,IAAK,YACH,OAAOoT,mBAAQD,GAAQ,SAAC5U,GAAD,OAAiC6H,OAAO7H,EAAMoF,aAAY,QACnF,QACE,OAAOwP,GAmDEE,CALbJ,EAA6BP,EAD3BM,EACalB,EAAyBW,EAAgCH,EAE9CE,KAIAD,QAAO,SAACe,GAAD,MAA0B,QAAnB9B,GAA4B8B,EAAE7X,WAAa+V,MACxDzG,KAAI,SAACxM,GAChC,IAAQ6F,EAAsB7F,EAAtB6F,WAAY5C,EAAUjD,EAAViD,MACd7G,EAAU4D,EAAM0C,UAAY1C,EAAM0C,SAAS/E,MAAM,KAAK,GAAG0F,cAAcmC,QAAQ,SAAU,IACzFoO,EAAcnB,EA+BpB,MA9BsB,CACpB/H,IAAK,CACH5L,MAAOkB,EAAM2F,KAAO3F,EAAM2F,IAAIjF,eAAe,QAAS,CAAE6E,sBAAuB,IAE/EnJ,UACAd,mBAAoBuK,EAAW3C,QAC/B8R,iBAAkBnP,EAAW5G,OAC7B1D,eAAgB0H,EAAMC,QACtB+R,UAAWrB,EACXzN,cAAenG,EAAM2F,KAEvB+F,KAAM,CACJwJ,MAAOlV,EAAM0C,SAAS/E,MAAM,KAAK,GAAGL,oBACpCmJ,MAAOrK,EACPuG,IAAK3C,EAAM2C,IACXzF,SAAU8C,EAAM9C,UAElB0J,OAAQ,CACNnF,SAAUzB,EAAMuI,SAAW/H,aAAiB,IAAImI,KAAU3I,EAAMuI,SAAS9G,WAAa,KACtFkB,IAAK3C,EAAM2C,KAEbyC,UAAW,CACTA,UAAWpF,EAAMoF,WAEnBtI,WAAY,CACVA,WAAYkD,EAAM9C,UAEpBuN,QAASzK,MA4Db,OACE,uCACE,gBAAC+R,GAAD,WACE,gBAAC,GAAD,WACE,eAAC,KAAD,CAASnD,GAAG,KAAKuG,KAAK,MAAMja,MAAM,YAAYkC,GAAG,OAAjD,SACGtC,EAAE,YAEL,eAAC,KAAD,CAASqa,KAAK,KAAKja,MAAM,OAAzB,SACGJ,EACC,uHAIN,eAACmX,GAAD,UACE,eAAC,GAAD,SAIJ,eAACC,GAAD,UACE,gBAACkD,GAAA,EAAD,WAYE,gBAAC3D,GAAD,WACE,gBAACI,GAAD,WAEE,gBAACH,GAAD,WACE,eAAC,MAAD,CAAQ2D,QAAS9B,EAAanU,SAAU,kBAAMoU,GAAgBD,IAAc5E,MAAM,OAClF,gBAAC,MAAD,eAAQ7T,EAAE,qBAEZ,eAAC,GAAD,OAEF,gBAAC8W,GAAD,WACE,gBAACD,GAAD,CAAclS,MAAO,CAAE6V,YAAa,IAApC,UACE,eAAC,MAAD,UAAOxa,EAAE,aACT,eAAC,GAAD,CACEyV,QAAS,CACP,CACE9J,MAAO3L,EAAE,OACTgE,MAAO,OAET,CACE2H,MAAO3L,EAAE,OACTgE,MAAO,OAET,CACE2H,MAAO3L,EAAE,sBACTgE,MAAO,UAET,CACE2H,MAAO3L,EAAE,aACTgE,MAAO,cAGXM,SAtEe,SAAC6R,GAC9B+B,EAAc/B,EAAOnS,aAwFX,gBAAC6S,GAAD,CAAclS,MAAO,CAAE8V,WAAY,IAAnC,UACE,eAAC,MAAD,UAAOza,EAAE,YACT,eAAC,GAAD,CAAasE,SA5LD,SAACoW,GACzB5C,EAAS4C,EAAM9b,OAAOoF,QA2LgCA,MAAO6T,aA1IzC,WACpB,GAAIG,IAAanX,EAASkX,OAAS8B,EAAQ7a,OAAQ,CACjD,IAEM4T,EAFelC,GAEQgB,KAAI,SAACC,GAAD,MAAa,CAC5CrB,GAAIqB,EAAOrB,GACXC,KAAMoB,EAAOpB,KACb5E,MAAOgG,EAAOhG,MACdgP,KAAM,SAACjW,EAAsBkW,GAC3B,OAAQjJ,EAAOpB,MACb,IAAK,OACH,OAAOqK,EAAEtK,GAAK5L,EAAE4L,GAClB,IAAK,MACH,OAAI5L,EAAEwO,SAAStD,IAAI5L,OAAS4W,EAAE1H,SAAStD,IAAI5L,MAClC+I,OAAOrI,EAAEwO,SAAStD,IAAI5L,OAAS+I,OAAO6N,EAAE1H,SAAStD,IAAI5L,OAGvD,EACT,IAAK,SACH,OAAOU,EAAEwO,SAASpH,OAAOnF,SAAWiU,EAAE1H,SAASpH,OAAOnF,SACxD,QACE,OAAO,IAGb8J,SAAUkB,EAAOlB,aAGnB,OAAO,eAAC,GAAD,CAAOkC,KAAMkH,EAASjH,QAASA,IAExC,OACE,+BACE,gBAACjR,GAAA,EAAD,WACE,eAAC,KAAD,CAAOkZ,OAAK,EAACvD,KAAI,UAAKA,GAAtB,SACGsC,EAAalI,KAAI,SAACxM,GAAD,OAChB,eAAC,GAAD,CAA2BA,MAAOA,EAAOyS,SAAUA,EAAU9Q,QAASA,EAASzF,SAAS,GAAxE8D,EAAM2C,UAG1B,eAAC,KAAD,CAAOgT,OAAK,EAACvD,KAAI,UAAKA,EAAL,YAAjB,SACGsC,EAAalI,KAAI,SAACxM,GAAD,OAChB,eAAC,GAAD,CAA2BA,MAAOA,EAAOyS,SAAUA,EAAU9Q,QAASA,EAASzF,SAAO,GAAtE8D,EAAM2C,eAuGzBiT,GACD,eAAC9D,GAAD,CAAazU,IAAI,6BAA6BE,IAAI,0BAA0BC,MAAO,IAAKC,OAAQ","file":"static/js/30.1d170ca2.chunk.js","sourcesContent":["import objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.textSubtle};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const { t } = useTranslation()\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"textSubtle\" bold>\n        {expanded ? t('Hide') : t('Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nconst getLiquidityUrlPathParts = ({ quoteTokenAdresses, tokenAddresses }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const firstPart = quoteTokenAdresses ? quoteTokenAdresses[chainId] : 'CORE'\n  const secondPart = tokenAddresses ? tokenAddresses[chainId] : 'CORE'\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","export { default } from './ExpandableSectionButton'\n","export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Deposited + Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Provider',\n  },\n  {\n    id: 3,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Deposited + Earned',\n  },\n  {\n    id: 4,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 5,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","import React from 'react'\nimport { useTranslation } from 'contexts/Localization'\nimport styled from 'styled-components'\nimport { Text, Flex, Link, LinkExternal } from 'archerswap-uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  removed?: boolean\n  totalValueFormated?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  removed,\n  totalValueFormated,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const { t } = useTranslation()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{t('Stake')}:</Text>\n        <StyledLinkExternal href={addLiquidityUrl}>{lpLabel}</StyledLinkExternal>\n      </Flex>\n      {!removed && (\n        <Flex justifyContent=\"space-between\">\n          <Text>{t('Total Liquidity')}:</Text>\n          <Text>{totalValueFormated}</Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"flex-start\">\n        <Link external href={bscScanAddress} bold={false}>\n          {t('View on BscScan')}\n        </Link>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from 'archerswap-uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityVault?: boolean\n  vaultImage?: string\n  tokenSymbol?: string\n  provider?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n  color: ${({ theme }) => theme.colors.card};\n  background-color: ${({ theme }) => theme.colors.text};\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityVault,\n  vaultImage,\n  tokenSymbol,\n  provider,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${vaultImage.toLocaleLowerCase()}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityVault ? <CommunityTag /> : <CoreTag provider={provider} />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from 'archerswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal\n      title={tokenName === 'BOW' ? t(`Deposit %symbol%`, { symbol: tokenName }) : t('Deposit LP tokens')}\n      onDismiss={onDismiss}\n    >\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={t('Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {t('Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {t('Get %symbol%', { symbol: tokenName })}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from 'archerswap-uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport { useTranslation } from 'contexts/Localization'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const { t } = useTranslation()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal\n      title={tokenName === 'BOW' ? t(`Withdraw %symbol%`, { symbol: tokenName }) : t('Withdraw LP tokens')}\n      onDismiss={onDismiss}\n    >\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={t('Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {t('Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? t('Pending Confirmation') : t('Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useStakeVault } from 'hooks/useStake'\nimport { useUnstakeVault } from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getAddress } from 'utils/addressHelpers'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface VaultCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  addLiquidityUrl?: string\n  vault?: any\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<VaultCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  // pid,\n  addLiquidityUrl,\n  vault,\n}) => {\n  const { t } = useTranslation()\n  const { onStake } = useStakeVault(getAddress(vault.vaultAddresses), tokenBalance)\n  const { onUnstake } = useUnstakeVault(getAddress(vault.vaultAddresses), stakedBalance)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const rawCurrentBalance = getBalanceNumber(tokenBalance)\n  const displayBalance = rawCurrentBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{t('Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.tooltip.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.tooltip.text};\n  width: max-content;\n  display: none;\n  padding: 16px;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport { useVaultHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport { getAddress } from 'utils/addressHelpers'\nimport Tooltip from '../Tooltip/Tooltip'\n\ninterface VaultCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n  strategyAddresses?: any\n}\n\nconst HarvestAction: React.FC<VaultCardActionsProps> = ({ earnings, ...props }) => {\n  const { account } = useWeb3React()\n  const { t } = useTranslation()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useVaultHarvest(getAddress(props.strategyAddresses))\n\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <Tooltip\n        content={t(\n          'Users who call the compound button will call the contract for everyone in the vault contract. You will receive 0.5% of the entire compound as a wcore reward to compensate for your gas costs',\n        )}\n      >\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {t('Compound')}\n        </Button>\n      </Tooltip>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from 'archerswap-uikit'\nimport { Vault } from 'state/types'\nimport { useVaultFromSymbol, useVaultUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApproveVault } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nconst StyledUnlockButton = styled(UnlockButton)`\n  color: #000000;\n  width: 100%;\n  border-radius: 7px;\n`\nconst StyledButton = styled(Button)`\n  color: #000000;\n`\n\nexport interface VaultWithStakedValue extends Vault {\n  apy?: number\n}\n\ninterface VaultCardActionsProps {\n  vault: VaultWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<VaultCardActionsProps> = ({ vault, account, addLiquidityUrl }) => {\n  const { t } = useTranslation()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useVaultFromSymbol(vault.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useVaultUser(pid, vault.provider)\n  let lpAddress = getAddress(lpAddresses)\n\n  if (vault.isSingle) {\n    lpAddress = vault.token.address[process.env.REACT_APP_CHAIN_ID]\n  }\n  const lpName = vault.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApproveVault(lpContract, getAddress(vault.vaultAddresses))\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        addLiquidityUrl={addLiquidityUrl}\n        vault={vault}\n      />\n    ) : (\n      <StyledButton mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {t('Approve Contract')}\n      </StyledButton>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useVaultFromSymbol? */}\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Deposited + Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} {...vault} />\n      <Flex>\n        {/* <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text> */}\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {t('Your wallet balance available')}\n        </Text>\n      </Flex>\n      {!account ? <StyledUnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from 'archerswap-uikit'\nimport { communityVaults } from 'config/constants'\nimport { Vault } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport { useTranslation } from 'contexts/Localization'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\n\nexport interface VaultWithStakedValue extends Vault {\n  apy?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\nconst StyledText = styled(Text)`\n  color: ${({ theme }) => theme.colors.textDisabled};\n`\n\ninterface VaultCardProps {\n  vault: VaultWithStakedValue\n  removed: boolean\n  bowPrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst VaultCard: React.FC<VaultCardProps> = ({ vault, removed, account }) => {\n  const { t } = useTranslation()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityVault = communityVaults.includes(vault.token.symbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const vaultImage = vault.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormated = vault.liquidity\n    ? `$${vault.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = vault.lpSymbol && vault.lpSymbol.toUpperCase().replace('ARCHER', '')\n  const earnLabel = vault.lpSymbol // vault.dual ? vault.dual.earnLabel : 'BOW  '\n\n  const vaultApy = vault.apy && vault.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAdresses: vault.quoteToken.address,\n    tokenAddresses: vault.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return (\n    <FCard>\n      {['BOW'].includes(vault.token.symbol) && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={vault.multiplier}\n        isCommunityVault={isCommunityVault}\n        vaultImage={vaultImage}\n        tokenSymbol={vault.token.symbol}\n        provider={vault.provider}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <StyledText>{t('APY')}:</StyledText>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {vault.apy ? (\n              <>\n                {/* <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={vault.apy} /> */}\n                {vaultApy}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <StyledText>{t('Earned')}:</StyledText>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer vault={vault} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${vault.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          totalValueFormated={totalValueFormated}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default VaultCard\n","import React from 'react'\nimport styled from 'styled-components'\n// import ApyButton from 'views/Vaults/components/VaultCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\n// import getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { useTranslation } from 'contexts/Localization'\n\nexport interface AprProps {\n  value: string\n  // multiplier: string\n  lpLabel: string\n  quoteTokenAdresses: Address\n  quoteTokenSymbol: string\n  tokenAddresses: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n  word-break: break-all;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  // lpLabel,\n  // quoteTokenAdresses,\n  // tokenAddresses,\n  // cakePrice,\n  originalValue,\n  // hideButton = false,\n  // ...props\n}) => {\n  const { t } = useTranslation()\n  // const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAdresses, tokenAddresses })\n  // const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  return (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {/* {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )} */}\n        </>\n      ) : (\n        <AprWrapper>{t('Loading...')}</AprWrapper>\n      )}\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useVaultUser } from 'state/hooks'\nimport { useTranslation } from 'contexts/Localization'\nimport { Text, Image } from 'archerswap-uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface VaultProps {\n  label: string\n  pid: number\n  image: string\n  provider?: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Vault: React.FunctionComponent<VaultProps> = ({ label, pid, provider }) => {\n  const { stakedBalance } = useVaultUser(pid, provider)\n  const { t } = useTranslation()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderVaulting = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {t('Staked')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      {/* <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" /> */}\n      <IconImage src={`/images/farms/${label.toLocaleLowerCase()}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderVaulting()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Vault\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const displayBalance = earnings !== null && account ? earnings.toLocaleString() : '?'\n\n  return <Amount earned={earnings}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n  const { t } = useTranslation()\n\n  return (\n    <Container>\n      {!isMobile && t('Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\n// import { HelpIcon } from 'archerswap-uikit'\n// import { useTranslation } from 'contexts/Localization'\n\n// import Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n  text-transform: capitalize;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultipler = multiplier ? multiplier.toLowerCase() : '-'\n  // const { t } = useTranslation()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultipler}</MultiplierWrapper>\n      {/* <Tooltip\n        content={\n          <div>\n            {t('The multiplier represents the amount of BOW rewards each farm gets.')}\n            <br />\n            <br />\n            {t(\n              'For example, if a 1x farm was getting 1 BOW per block, a 2x farm would be getting 2 BOW per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip> */}\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const { t } = useTranslation()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={t('Total value of the funds in this vault’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from 'archerswap-uikit'\nimport BigNumber from 'bignumber.js'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useVaultHarvest } from 'hooks/useHarvest'\nimport { useTranslation } from 'contexts/Localization'\nimport { useGetApiPrices } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\nimport { useCountUp } from 'react-countup'\nimport Tooltip from '../../Tooltip/Tooltip'\n\nimport { ActionContainer, ActionTitles, Title, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<VaultWithStakedValue> = ({ userData, ...props }) => {\n  const { account } = useWeb3React()\n  const prices = useGetApiPrices()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    const quoteTokenPriceUsd = prices[props.quoteToken.symbol.toLowerCase()]\n    const totalLiquidity = new BigNumber(props.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n    const lpPrice = new BigNumber(totalLiquidity).div(props.vaultBalance)\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(props.isSingle ? quoteTokenPriceUsd : lpPrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useVaultHarvest(getAddress(props.strategyAddresses))\n  const { t } = useTranslation()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>{t('Deposited + Earned')}</Title>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp} USD</Staked>\n        </div>\n        <Tooltip\n          content={t(\n            'Users who call the compound button will call the contract for everyone in the vault contract. You will receive 0.5% of the entire compound as a wcore reward to compensate for your gas costs',\n          )}\n        >\n          <Button\n            disabled={pendingTx || !account}\n            onClick={async () => {\n              setPendingTx(true)\n              await onReward()\n              setPendingTx(false)\n            }}\n            ml=\"4px\"\n          >\n            {t('Compound')}\n          </Button>\n        </Tooltip>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useRef, useEffect, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from 'archerswap-uikit'\nimport BigNumber from 'bignumber.js'\nimport { useCountUp } from 'react-countup'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useVaultUser, useGetApiPrices } from 'state/hooks'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport { useTranslation } from 'contexts/Localization'\nimport { useApproveVault } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useStakeVault } from 'hooks/useStake'\nimport { useUnstakeVault } from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\nimport { getAddress } from 'utils/addressHelpers'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Subtle, Staked as Balanced } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<VaultWithStakedValue> = ({\n  pid,\n  lpSymbol,\n  lpAddresses,\n  quoteToken,\n  token,\n  ...props\n}) => {\n  const { t } = useTranslation()\n  const { account } = useWeb3React()\n  const prices = useGetApiPrices()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useVaultUser(pid, props.provider)\n  const { onStake } = useStakeVault(getAddress(props.vaultAddresses), tokenBalance)\n  const { onUnstake } = useUnstakeVault(getAddress(props.vaultAddresses), stakedBalance)\n  const web3 = useWeb3()\n\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  const isApproved = lpSymbol === 'CORE' ? true : account && allowance && allowance.isGreaterThan(0)\n\n  let lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  if (props.isSingle) {\n    lpAddress = token.address[process.env.REACT_APP_CHAIN_ID]\n  }\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAdresses: quoteToken.address,\n    tokenAddresses: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const currentBalance = getBalanceNumber(tokenBalance)\n\n  const quoteTokenPriceUsd = prices[quoteToken.symbol.toLowerCase()]\n  const totalLiquidity = new BigNumber(props.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n\n  let lpPrice = new BigNumber(0)\n  if (props.isSingle) {\n    lpPrice = new BigNumber(prices[lpSymbol === 'CORE' ? 'wcore' : lpSymbol.toLowerCase()])\n  } else {\n    lpPrice = new BigNumber(totalLiquidity).div(props.vaultBalance)\n  }\n\n  earningsBusd = new BigNumber(currentBalance).multipliedBy(lpPrice).toNumber()\n  displayBalance = currentBalance.toLocaleString()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApproveVault(lpContract, getAddress(props.vaultAddresses))\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Start Farming')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            {/* <Title>{lpSymbol} </Title> */}\n            <Subtle>{t('Your wallet balance available')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n              <Balanced>~{countUp} USD</Balanced>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{t('Deposit %symbol%', { symbol: lpSymbol })} </Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {lpSymbol === 'BOW' ? t(`Deposit %symbol%`, { symbol: lpSymbol }) : t('Deposit LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{t('Enable Vault')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {t('Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\nimport { LinkExternal, Text } from 'archerswap-uikit'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityVaults } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\n// import Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  // multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: VaultWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, liquidity }) => {\n  const vault = details\n\n  const { t } = useTranslation()\n  const { quoteToken, token, dual } = vault\n  const lpLabel = vault.lpSymbol && vault.lpSymbol.toUpperCase().replace('ARCHER', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAdresses: quoteToken.address,\n    tokenAddresses: token.address,\n  })\n\n  const lpAddress = vault.isSingle\n    ? vault.token.address[process.env.REACT_APP_CHAIN_ID]\n    : vault.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const exchangeLink = vault.isSingle\n    ? `https://archerswap.finance/#/swap?outputCurrency=${lpAddress}`\n    : `https://archerswap.finance/#/add/${liquidityUrlPathParts}`\n\n  const bsc = `https://scan.coredao.org/address/${lpAddress}`\n  const info = `https://info.archerswap.finance/${vault.isSingle ? 'token' : 'pair'}/${lpAddress}`\n  const isCommunityVault = communityVaults.includes(token.symbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        <StakeContainer>\n          <StyledLinkExternal href={exchangeLink}>{t(`Get %symbol%`, { symbol: lpLabel })}</StyledLinkExternal>\n        </StakeContainer>\n        <StyledLinkExternal href={bsc}>{t('View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{vault.isSingle ? t('See Token Info') : t('See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityVault ? <CommunityTag /> : <CoreTag provider={vault.provider} />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{t('APY')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        {/* <ValueWrapper>\n          <Text>{t('Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper> */}\n        <ValueWrapper>\n          <Text>{t('Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...vault} />\n        <StakedAction {...vault} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { VaultWithStakedValue } from 'views/Vaults/components/VaultCard/VaultCard'\nimport { useMatchBreakpoints } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Apr, { AprProps } from './Apr'\nimport Vault, { VaultProps } from './Vault'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: VaultProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: VaultWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Vault,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst VaultMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const { t } = useTranslation()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t('APY')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={t(tableSchema[columnIndex].label)}>\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <VaultMobileCell>\n              <CellLayout>\n                <Vault {...props.farm} />\n              </CellLayout>\n            </VaultMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={t('Deposited + Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={t('APY')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n}\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst VaultTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const { t } = useTranslation()\n  const { data, columns } = props\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {t('To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default VaultTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from 'archerswap-uikit'\nimport { useTranslation } from 'contexts/Localization'\nimport useTheme from 'hooks/useTheme'\n\nconst VaultTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const { t } = useTranslation()\n  const { isDark } = useTheme()\n  const textColor = isDark ? '' : '#2A2A2A'\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"primary\">\n        <ButtonMenuItem as={Link} to={`${url}`} style={{ borderRadius: '30px', width: '10px', color: textColor }}>\n          {t('Live')}\n        </ButtonMenuItem>\n        <ButtonMenuItem\n          as={Link}\n          to={`${url}/history`}\n          style={{ borderRadius: '30px', width: '100px', color: textColor }}\n        >\n          {t('Finished')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default VaultTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport { Input } from 'archerswap-uikit'\nimport styled from 'styled-components'\nimport { useTranslation } from 'contexts/Localization'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n  ::placeholder {\n    opacity: 0.5;\n  }\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n  const { t } = useTranslation()\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder={t('Search Vaults')}\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from 'archerswap-uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.background};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nconst float = keyframes`\n\t0% {\n\t\ttransform: translatey(0px);\n\t}\n\t50% {\n\t\ttransform: translatey(10px);\n\t}\n\t100% {\n\t\ttransform: translatey(0px);\n\t}\n`\n\nconst StyledBackground = styled.div`\n  display: none;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: block;\n    background-image: url('/images/assets/farmingbg.svg');\n    background-repeat: no-repeat;\n    background-position: center 110px;\n  }\n`\n\nconst Img = styled.img`\n  animation: ${float} 4s ease-in-out infinite;\n  transform: translate3d(0, 0, 0);\n`\n\nconst JetVault = () => {\n  return (\n    <StyledBackground>\n      <Img src=\"/images/assets/vault.svg\" alt=\"jet\" />\n    </StyledBackground>\n  )\n}\n\nexport default JetVault\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from 'archerswap-uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useValuts, usePriceBowUsd, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport useWeb3 from 'hooks/useWeb3'\nimport { fetchVaultUserDataAsync } from 'state/actions'\nimport { Vault } from 'state/types'\nimport { useTranslation } from 'contexts/Localization'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getVaultApy } from 'utils/apy'\nimport { orderBy } from 'lodash'\n// import { START_TIMESTAMP } from 'config'\n\nimport VaultCard, { VaultWithStakedValue } from './components/VaultCard/VaultCard'\nimport Table from './components/VaultTable/VaultTable'\nimport VaultTabButtons from './components/VaultTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/VaultTable/Row'\n// import ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\nimport JetVault from './components/JetVault'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > div {\n    max-width: 136px;\n    min-width: unset;\n\n    > div {\n      width: 100%;\n    }\n  }\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: ${({ theme }) => theme.colors.farming};\n\n  display: block;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding: 0 0 0 8.5%;\n    min-height: 190px;\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    align-items: center;\n    justify-content: center;\n  }\n`\n\nconst Container = styled.div``\nconst Container2 = styled.div`\n  display: flex;\n  justify-content: center;\n`\nconst Background = styled.div`\n  width: 100%;\n  background-image: url('/images/assets/bgf.svg');\n  background-repeat: no-repeat;\n  background-position: top 80px right;\n`\n// const NotifyContainer = styled.div`\n//   border: 1px solid #fec803;\n//   border-radius: 8px;\n//   padding: 8px 16px;\n//   margin-bottom: 16px;\n// `\n\nconst Vaults: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const { t } = useTranslation()\n  const vaultsLP = useValuts()\n  const bowPrice = usePriceBowUsd()\n  const [query, setQuery] = useState('')\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [viewMode, setViewMode] = useState(ViewMode.TABLE)\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const [sortOption, setSortOption] = useState(t('hot'))\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [providerOption, setProviderOption] = useState('All')\n  const prices = useGetApiPrices()\n\n  // const { blockNumber } = useBlock()\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchVaultUserDataAsync(account, web3))\n    }\n  }, [account, web3, dispatch, fastRefresh])\n  const [stackedOnly, setStackedOnly] = useState(false)\n\n  const calculateAPY = (vault) => {\n    const quoteTokenPriceUsd = prices[vault.quoteToken.symbol.toLowerCase()]\n    const totalFarmLiquidity = new BigNumber(vault.lpTotalMcInQuoteToken).times(quoteTokenPriceUsd)\n    const rewardPrice = bowPrice\n    const apy = getVaultApy(vault.poolWeight, rewardPrice, totalFarmLiquidity)\n    return apy\n  }\n\n  const activeVaults = vaultsLP.filter((vault) => calculateAPY(vault) !== 0)\n  const inactiveVaults = vaultsLP.filter((vault) => calculateAPY(vault) === 0)\n\n  const stackedOnlyVaults = activeVaults.filter(\n    (vault) => vault.userData && new BigNumber(vault.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortVaults = (vaults: VaultWithStakedValue[]): VaultWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(vaults, 'apy', 'desc')\n      // case 'multiplier':\n      //   return orderBy(\n      //     vaults,\n      //     (vault: VaultWithStakedValue) => (vault.multiplier ? Number(vault.multiplier.slice(0, -1)) : 0),\n      //     'desc',\n      //   )\n      case 'earned':\n        return orderBy(vaults, (vault: VaultWithStakedValue) => (vault.userData ? vault.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(vaults, (vault: VaultWithStakedValue) => Number(vault.liquidity), 'desc')\n      default:\n        return vaults\n    }\n  }\n\n  const vaultsList = useCallback(\n    (vaultsToDisplay: Vault[]): VaultWithStakedValue[] => {\n      let vaultsToDisplayWithAPY: VaultWithStakedValue[] = vaultsToDisplay.map((vault) => {\n        if (!vault.lpTotalMcInQuoteToken || !prices) {\n          return vault\n        }\n\n        const quoteTokenPriceUsd = prices[vault.quoteToken.symbol.toLowerCase()]\n        let totalFarmLiquidity = new BigNumber(vault.lpTotalMcInQuoteToken).times(quoteTokenPriceUsd)\n        let totalLiquidity = new BigNumber(vault.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const lpPrice = new BigNumber(totalLiquidity).div(vault.vaultBalance)\n        if (vault.lpSymbol === 'BOW') {\n          totalLiquidity = new BigNumber(vault.vaultBalance).times(prices[vault.lpSymbol.toLowerCase()])\n          totalFarmLiquidity = new BigNumber(vault.tokenBalanceMC).times(prices[vault.lpSymbol.toLowerCase()])\n        }\n        const rewardPrice = prices.bow\n        const apy = getVaultApy(vault.poolWeight, rewardPrice, totalFarmLiquidity, vault.provider)\n        return { ...vault, apy, liquidity: totalLiquidity, lpPrice }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        vaultsToDisplayWithAPY = vaultsToDisplayWithAPY.filter((vault: VaultWithStakedValue) => {\n          if (vault.lpSymbol.toLowerCase().includes(lowercaseQuery)) {\n            return true\n          }\n\n          return false\n        })\n      }\n      return vaultsToDisplayWithAPY\n    },\n    [prices, query],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  const isActive = !pathname.includes('history')\n  let vaultsStaked = []\n  if (isActive) {\n    vaultsStaked = stackedOnly ? vaultsList(stackedOnlyVaults) : vaultsList(activeVaults)\n  } else {\n    vaultsStaked = vaultsList(inactiveVaults)\n  }\n\n  vaultsStaked = sortVaults(vaultsStaked)\n  vaultsStaked = vaultsStaked.filter((v) => providerOption === 'All' || v.provider === providerOption)\n  const rowData = vaultsStaked.map((vault) => {\n    const { quoteToken, token } = vault\n    const lpLabel = vault.lpSymbol && vault.lpSymbol.split(' ')[0].toUpperCase().replace('ARCHER', '')\n    const rewardPrice = bowPrice\n    const row: RowProps = {\n      apr: {\n        value: vault.apy && vault.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        // multiplier: vault.multiplier,\n        lpLabel,\n        quoteTokenAdresses: quoteToken.address,\n        quoteTokenSymbol: quoteToken.symbol,\n        tokenAddresses: token.address,\n        cakePrice: rewardPrice,\n        originalValue: vault.apy,\n      },\n      farm: {\n        image: vault.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: vault.pid,\n        provider: vault.provider,\n      },\n      earned: {\n        earnings: vault.userData ? getBalanceNumber(new BigNumber(vault.userData.earnings)) : null,\n        pid: vault.pid,\n      },\n      liquidity: {\n        liquidity: vault.liquidity,\n      },\n      multiplier: {\n        multiplier: vault.provider,\n      },\n      details: vault,\n    }\n\n    return row\n  })\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {vaultsStaked.map((vault) => (\n              <VaultCard key={vault.pid} vault={vault} bowPrice={bowPrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {vaultsStaked.map((vault) => (\n              <VaultCard key={vault.pid} vault={vault} bowPrice={bowPrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  // const handleFilterProviderChange = (option: OptionProps): void => {\n  //   setProviderOption(option.value)\n  // }\n\n  return (\n    <>\n      <Header>\n        <Container>\n          <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n            {t('Vaults')}\n          </Heading>\n          <Heading size=\"lg\" color=\"text\">\n            {t(\n              'Deposit LP or single tokens to automatically grow your deposits. There is a 0.5% withdrawal fee on all vaults.',\n            )}\n          </Heading>\n        </Container>\n        <Container2>\n          <JetVault />\n        </Container2>\n      </Header>\n\n      <Background>\n        <Page>\n          {/* {blockNumber !== 0 && blockNumber <= START_TIMESTAMP && (\n            <NotifyContainer>\n              <Heading as=\"h1\" size=\"xl\" color=\"secondary\" mb=\"24px\">\n                {t('Bow Farming Countdown')}\n              </Heading>\n              <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\n                <Text fontSize=\"20px\">{t(`BOW Farming Starts On Block ${START_TIMESTAMP}`)}</Text>\n                <Text fontSize=\"20px\">{`${START_TIMESTAMP - blockNumber} blocks left until BOW Farming`}</Text>\n              </Flex>\n            </NotifyContainer>\n          )} */}\n          <ControlContainer>\n            <ViewControls>\n              {/* <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} /> */}\n              <ToggleWrapper>\n                <Toggle checked={stackedOnly} onChange={() => setStackedOnly(!stackedOnly)} scale=\"sm\" />\n                <Text> {t('Staked only')}</Text>\n              </ToggleWrapper>\n              <VaultTabButtons />\n            </ViewControls>\n            <FilterContainer>\n              <LabelWrapper style={{ marginRight: 16 }}>\n                <Text>{t('Sort by')}</Text>\n                <Select\n                  options={[\n                    {\n                      label: t('Hot'),\n                      value: 'hot',\n                    },\n                    {\n                      label: t('APY'),\n                      value: 'apr',\n                    },\n                    {\n                      label: t('Deposited + Earned'),\n                      value: 'earned',\n                    },\n                    {\n                      label: t('Liquidity'),\n                      value: 'liquidity',\n                    },\n                  ]}\n                  onChange={handleSortOptionChange}\n                />\n              </LabelWrapper>\n              {/* <LabelWrapper>\n                <Text>{t('Filter by')}</Text>\n                <Select\n                  options={[\n                    {\n                      label: 'All',\n                      value: 'All',\n                    },\n                    {\n                      label: 'Archerswap',\n                      value: 'Archerswap',\n                    },\n                  ]}\n                  onChange={handleFilterProviderChange}\n                />\n              </LabelWrapper> */}\n              <LabelWrapper style={{ marginLeft: 16 }}>\n                <Text>{t('Search')}</Text>\n                <SearchInput onChange={handleChangeQuery} value={query} />\n              </LabelWrapper>\n            </FilterContainer>\n          </ControlContainer>\n          {renderContent()}\n          <StyledImage src=\"/images/assets/farmjet.svg\" alt=\"Archerswap illustration\" width={120} height={103} />\n        </Page>\n      </Background>\n    </>\n  )\n}\n\nexport default Vaults\n"],"sourceRoot":""}