{"version":3,"sources":["hooks/api.ts","hooks/useNftMarketplace.ts"],"names":["useGetStats","useState","data","setData","useEffect","a","bowClient","query","factoryQuery","variables","fetchPolicy","result","pairTVL","uniswapFactories","map","factory","parseFloat","totalLiquidityUSD","update_at","total_value_locked","total_value_locked_all","trade_pairs","console","error","fetchData","useTokensData","tokensQuery","tokens","length","useCollections","marketplaceClient","getERC721CollectionsQuery","res","GetERC721Collections","useCollection","alias","getERC721CollectionQuery","GetERC721Collection","useCollectionAttributes","getERC721CollectionAttributesQuery","GetERC721CollectionAttributes","currentInput1","useERC721TokenCount","input","getERC721TokenCountQuery","GetERC721TokenCount","pageSize","filters","JSON","stringify","currentInput2","useERC721Tokens","getERC721TokensQuery","GetERC721Tokens","currentInput3","useERC721RecentEventsLite","ERC721RecentEventsLiteQuery","ERC721RecentEventsLite","chainId","tokenAddress","useERC721Token","tokenId","getERC721TokenQuery","GetERC721Token","currentInput4","useERC721TokenEvents","ERC721TokenEventsQuery","ERC721TokenEvents","useNumTokenListings","erc721Address","marketplaceContract","useMarketplace","getTokenListings","useCallback","methods","numTokenListings","call","useTokenListings","total","_tokenListing","_multicallMethods","i","push","address","getNftMarketplaceAddress","name","params","multicall","nftMarketplaceABI","t","filter","r","BigNumber","value","isZero","useTokenListing","isLoading","getTokenListing","undefined","useGetMyTokenIds","isShowMyNft","account","useWeb3React","nftTokenContract","useERC721","getMyTokenIds","balanceOf","balance","erc721ABI","multicallData","id","toString","useNumTokenWithBids","numTokenWithBids","useTokenHighestBids","_tokenHighestBids","useGetOwnerOfToken","ownerOf","useGetMyCollections","collections","getMyCollections","collection","c","idx","_","useGetServiceFee","getServiceFee","serviceFee","toNumber","useGetRoyalty","getRoyalty","royalty","feeFraction","useGetTokenBids","getTokenBids","bidder","useGetBidderTokenBid","getBidderTokenBid","useWithdrawBidToken","setIsLoading","isWithdrawBid","setIsWithdrawBid","withdrawBidForToken","send","from","tx","useAcceptBidToken","isAcceptBid","setIsAcceptBid","acceptBidForToken","useGetIsApprovedForAll","isApprovedForAll","useApproveNFT","options","setApprovalForAll","useListToken","isListed","setIsListed","price","expireTimestamp","listToken","times","useGetAllowanceWCORE","isAllowed","setIsAllowed","tokenContract","useWcore","getAllowanceWCORE","allowance","useConvertToWCORE","isConverted","setIsConverted","amount","deposit","log","useApproveWCORE","isWcoreApproved","setIsWcoreApproved","approve","ethers","constants","MaxUint256","useBidToken","isPlaceBid","setIsPlaceBid","enterBidForToken","useBuyToken","_amount","buyToken","useDelistToken","isDelisted","setIsDelisted","delistToken","useTransferToken","isTransferred","setTransferred","to","safeTransferFrom"],"mappings":"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","file":"static/js/5.15e31f5f.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { bowClient, marketplaceClient } from '../apollo/client'\nimport {\n  factoryQuery,\n  tokensQuery,\n  getERC721CollectionsQuery,\n  getERC721CollectionQuery,\n  getERC721CollectionAttributesQuery,\n  getERC721TokenCountQuery,\n  getERC721TokensQuery,\n  ERC721RecentEventsLiteQuery,\n  getERC721TokenQuery,\n  ERC721TokenEventsQuery,\n} from '../apollo/queries'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await bowClient.query({\n          query: factoryQuery,\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n\n        if (result?.data) {\n          let pairTVL = 0\n          result.data.uniswapFactories.map((factory) => {\n            pairTVL += parseFloat(factory.totalLiquidityUSD)\n            return pairTVL\n          })\n\n          const responsedata: ApiStatResponse = {\n            update_at: '',\n            '24h_total_volume': 0,\n            total_value_locked: 0,\n            total_value_locked_all: pairTVL,\n            trade_pairs: null,\n          }\n          setData(responsedata)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\nexport const useTokensData = () => {\n  const [data, setData] = useState<ApiStatResponse | 0>(0)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await bowClient.query({\n          query: tokensQuery,\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        setData(result?.data?.tokens.length)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\n// Marketplace GraphQL\n\nexport const useCollections = () => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res } = await marketplaceClient.query({\n          query: getERC721CollectionsQuery,\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        setData(res.GetERC721Collections || [])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\nexport const useCollection = (alias: string) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721CollectionQuery(alias),\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721Collection && res.GetERC721Collection.length !== 0) {\n          setData(res.GetERC721Collection[0])\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [alias])\n\n  return data\n}\n\nexport const useCollectionAttributes = (alias: string) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721CollectionAttributesQuery(alias),\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721CollectionAttributes) {\n          setData(res.GetERC721CollectionAttributes)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [alias])\n\n  return data\n}\n\nlet currentInput1 = {}\nexport const useERC721TokenCount = (input: any) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    currentInput1 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721TokenCountQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721TokenCount) {\n          setData(res.GetERC721TokenCount)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (input.pageSize && input.filters && JSON.stringify(input) !== JSON.stringify(currentInput1)) {\n      currentInput1 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n\nlet currentInput2 = {}\nexport const useERC721Tokens = (input: any) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    currentInput2 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721TokensQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721Tokens) {\n          setData(res.GetERC721Tokens)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (JSON.stringify(input) !== JSON.stringify(currentInput2)) {\n      currentInput2 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n\nlet currentInput3 = {}\nexport const useERC721RecentEventsLite = (input: any) => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    currentInput3 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: ERC721RecentEventsLiteQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.ERC721RecentEventsLite) {\n          setData(res.ERC721RecentEventsLite)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput3)) {\n      currentInput3 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n\nexport const useERC721Token = (alias: string, tokenId: string) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721TokenQuery(alias, tokenId),\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721Token) {\n          setData(res.GetERC721Token)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [alias, tokenId])\n\n  return data\n}\n\nlet currentInput4 = {}\nexport const useERC721TokenEvents = (input: any) => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    currentInput4 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: ERC721TokenEventsQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.ERC721TokenEvents) {\n          setData(res.ERC721TokenEvents)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput4)) {\n      currentInput4 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n","import { useEffect, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { ethers } from 'ethers'\nimport multicall from 'utils/multicall'\nimport nftMarketplaceABI from 'config/abi/nftMarketplace.json'\nimport erc721ABI from 'config/abi/erc721.json'\nimport { getNftMarketplaceAddress } from 'utils/addressHelpers'\nimport { useWcore, useERC721, useMarketplace } from './useContract'\n\n// GET Listed Tokens\n\nexport const useNumTokenListings = (erc721Address: string) => {\n  const [data, setData] = useState(0)\n  // const { account } = useWeb3React()\n  const marketplaceContract = useMarketplace()\n\n  const getTokenListings = useCallback(async () => {\n    const res = await marketplaceContract.methods.numTokenListings(erc721Address).call()\n    setData(res)\n  }, [marketplaceContract, erc721Address])\n\n  useEffect(() => {\n    if (erc721Address) {\n      getTokenListings()\n    }\n  }, [erc721Address, getTokenListings])\n\n  return data\n}\n\nexport const useTokenListings = (erc721Address: string, total: any) => {\n  const [data, setData] = useState<any>([])\n\n  const getTokenListings = useCallback(async () => {\n    const _tokenListing: any = []\n    const _multicallMethods = []\n    for (let i = 0; i < total; i += 128) {\n      _multicallMethods.push({\n        address: getNftMarketplaceAddress(),\n        name: 'getTokenListings',\n        params: [erc721Address, i, 128],\n      })\n    }\n    const multicallData = await multicall(nftMarketplaceABI, _multicallMethods)\n    multicallData.map((t: any) => {\n      _tokenListing.push(...t[0].filter((r: any) => !new BigNumber(r.value).isZero()))\n      return true\n    })\n\n    setData([..._tokenListing])\n  }, [erc721Address, total])\n\n  useEffect(() => {\n    if (erc721Address && total) {\n      getTokenListings()\n    }\n  }, [erc721Address, total, getTokenListings])\n\n  return data\n}\n\n// Get Listed Token Info\nexport const useTokenListing = (erc721Address: string, tokenId: any, isLoading: any) => {\n  const [data, setData] = useState<any>({})\n  const marketplaceContract = useMarketplace()\n\n  const getTokenListing = useCallback(async () => {\n    const res: any = await marketplaceContract.methods.getTokenListing(erc721Address, tokenId).call()\n    setData(res)\n  }, [marketplaceContract, erc721Address, tokenId])\n\n  useEffect(() => {\n    if (erc721Address && tokenId !== undefined) {\n      getTokenListing()\n    }\n  }, [erc721Address, tokenId, isLoading, getTokenListing])\n\n  return data\n}\n\n// Get My NFT Tokens\n\nexport const useGetMyTokenIds = (erc721Address: string, isShowMyNft: string) => {\n  const { account } = useWeb3React()\n  const [data, setData] = useState<any>([])\n  const nftTokenContract = useERC721(erc721Address)\n\n  useEffect(() => {\n    const getMyTokenIds = async () => {\n      const balance: any = await nftTokenContract.methods.balanceOf(account).call()\n      const _multicallMethods = []\n      for (let i = 0; i < +balance; i++) {\n        _multicallMethods.push({\n          address: erc721Address,\n          name: 'tokenOfOwnerByIndex',\n          params: [account, i],\n        })\n      }\n      const multicallData = await multicall(erc721ABI, _multicallMethods)\n      setData(multicallData.map((id) => id.toString(10)))\n    }\n    if (nftTokenContract && erc721Address && isShowMyNft === 'on') {\n      getMyTokenIds()\n    }\n  }, [account, nftTokenContract, erc721Address, isShowMyNft])\n\n  return data\n}\n\n// GET tokens which got offer\n\nexport const useNumTokenWithBids = () => {\n  const [data, setData] = useState(0)\n  const marketplaceContract = useMarketplace()\n\n  const getTokenWithBids = useCallback(\n    async (erc721Address: string) => {\n      if (erc721Address) {\n        const res = await marketplaceContract.methods.numTokenWithBids(erc721Address).call()\n        setData(res)\n      }\n    },\n    [marketplaceContract],\n  )\n\n  return [data, getTokenWithBids]\n}\n\nexport const useTokenHighestBids = () => {\n  const [data, setData] = useState<any>([])\n\n  const getTokenHighestBids = useCallback(async (erc721Address: any, total: any) => {\n    if (erc721Address && total) {\n      const _tokenHighestBids: any = []\n      const _multicallMethods = []\n      for (let i = 0; i < total; i += 64) {\n        _multicallMethods.push({\n          address: getNftMarketplaceAddress(),\n          name: 'getTokenHighestBids',\n          params: [erc721Address, i, 128],\n        })\n      }\n      const multicallData = await multicall(nftMarketplaceABI, _multicallMethods)\n\n      multicallData.map((t: any) => {\n        _tokenHighestBids.push(...t[0].filter((r: any) => !new BigNumber(r.value).isZero()))\n        return true\n      })\n\n      setData([..._tokenHighestBids])\n    }\n  }, [])\n\n  return [data, getTokenHighestBids]\n}\n\n// Get Token owner address\n\nexport const useGetOwnerOfToken = (erc721Address: string) => {\n  const [data, setData] = useState<any>('')\n\n  const nftTokenContract = useERC721(erc721Address)\n\n  const getOwnerOfToken = useCallback(\n    async (tokenId: string) => {\n      if (nftTokenContract && tokenId !== undefined) {\n        const res: any = await nftTokenContract.methods.ownerOf(tokenId).call()\n        setData(res)\n      }\n    },\n    [nftTokenContract],\n  )\n\n  return [data, getOwnerOfToken]\n}\n// Get My NFTs Collections\nexport const useGetMyCollections = (collections: any = []) => {\n  const [data, setData] = useState([])\n  const { account } = useWeb3React()\n\n  const getMyCollections = useCallback(async () => {\n    if (!account) return\n    const _multicallMethods = []\n    collections.map(async (collection: any) => {\n      _multicallMethods.push({\n        address: collection.address,\n        name: 'balanceOf',\n        params: [account],\n      })\n    })\n\n    const multicallData = await multicall(erc721ABI, _multicallMethods)\n\n    setData(\n      collections\n        .map((c: any, idx: any) => {\n          return { ...c, balance: multicallData[idx].toString(10) }\n        })\n        .filter((_: any, idx: any) => !new BigNumber(multicallData[idx]).isZero()),\n    )\n  }, [account, collections])\n\n  useEffect(() => {\n    getMyCollections()\n  }, [getMyCollections])\n\n  return data\n}\n\n// GET Service Fee\nexport const useGetServiceFee = () => {\n  const [data, setData] = useState(0)\n  const marketplaceContract = useMarketplace()\n\n  const getServiceFee = useCallback(async () => {\n    const res = await marketplaceContract.methods.serviceFee().call()\n    setData(new BigNumber(((res || 0) * 100) / 1000).toNumber())\n  }, [marketplaceContract])\n\n  useEffect(() => {\n    getServiceFee()\n  }, [getServiceFee])\n\n  return data\n}\n\n// GET royalty\nexport const useGetRoyalty = (erc721Address: string) => {\n  const [data, setData] = useState(0)\n  const marketplaceContract = useMarketplace()\n\n  const getRoyalty = useCallback(async () => {\n    const res = await marketplaceContract.methods.royalty(erc721Address).call()\n    setData(new BigNumber((res.feeFraction * 100) / 1000).toNumber())\n  }, [erc721Address, marketplaceContract])\n\n  useEffect(() => {\n    if (erc721Address) {\n      getRoyalty()\n    }\n  }, [erc721Address, getRoyalty])\n\n  return data\n}\n\n// Get Token Bids\n\nexport const useGetTokenBids = () => {\n  const [data, setData] = useState([])\n  const marketplaceContract = useMarketplace()\n\n  const getTokenBids = useCallback(\n    async (erc721Address: string, tokenId: any) => {\n      if (erc721Address && tokenId !== undefined) {\n        const res = await marketplaceContract.methods.getTokenBids(erc721Address, tokenId).call()\n        setData((res || []).filter((r: any) => r.bidder !== '0x0000000000000000000000000000000000000000'))\n      }\n    },\n    [marketplaceContract],\n  )\n\n  return [data, getTokenBids]\n}\n\n// Get BidderToken\n\nexport const useGetBidderTokenBid = () => {\n  const [data, setData] = useState<any>({})\n  const { account } = useWeb3React()\n  const marketplaceContract = useMarketplace()\n\n  const getBidderTokenBid = useCallback(\n    async (erc721Address: any, tokenId: any) => {\n      if (erc721Address && tokenId !== undefined && account) {\n        const res: any = await marketplaceContract.methods.getBidderTokenBid(erc721Address, tokenId, account).call()\n        setData(res)\n      }\n    },\n    [account, marketplaceContract],\n  )\n\n  return [data, getBidderTokenBid]\n}\n\n// Withdraw Bid Token\nexport const useWithdrawBidToken = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isWithdrawBid, setIsWithdrawBid] = useState<any>(false)\n  const marketplaceContract = useMarketplace()\n\n  const { account } = useWeb3React()\n\n  const withdrawBidToken = useCallback(\n    async (erc721Address: string, tokenId: string) => {\n      try {\n        setIsLoading(true)\n        const tx = await marketplaceContract.methods.withdrawBidForToken(erc721Address, tokenId).send({ from: account })\n        setIsLoading(false)\n        if (tx) {\n          setIsWithdrawBid(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [marketplaceContract, account],\n  )\n\n  return [isLoading, isWithdrawBid, withdrawBidToken]\n}\n\n// Accept Bid Token\nexport const useAcceptBidToken = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isAcceptBid, setIsAcceptBid] = useState<any>(false)\n  const marketplaceContract = useMarketplace()\n\n  const { account } = useWeb3React()\n\n  const acceptBidToken = useCallback(\n    async (erc721Address: string, tokenId: string, bidder: string, value: string) => {\n      try {\n        setIsLoading(true)\n        const tx = await marketplaceContract.methods\n          .acceptBidForToken(erc721Address, tokenId, bidder, value)\n          .send({ from: account })\n        setIsLoading(false)\n        if (tx) {\n          setIsAcceptBid(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [marketplaceContract, account],\n  )\n\n  return [isLoading, isAcceptBid, acceptBidToken]\n}\n\nexport const useGetIsApprovedForAll = (erc721Address: any) => {\n  const [data, setData] = useState<any>(false)\n  const nftTokenContract = useERC721(erc721Address)\n  const { account } = useWeb3React()\n\n  const getIsApprovedForAll = useCallback(async () => {\n    if (nftTokenContract) {\n      const res: any = await nftTokenContract.methods.isApprovedForAll(account, getNftMarketplaceAddress()).call()\n      setData(res)\n    }\n  }, [account, nftTokenContract])\n  return [data, getIsApprovedForAll]\n}\n\n// Get Approve\nexport const useApproveNFT = (erc721Address: string) => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n\n  const { account } = useWeb3React()\n  const nftTokenContract = useERC721(erc721Address)\n\n  const approveNFT = useCallback(async () => {\n    if (!account) return false\n    try {\n      setIsLoading(true)\n      const options = {\n        from: account,\n      }\n      const tx = await nftTokenContract.methods.setApprovalForAll(getNftMarketplaceAddress(), true).send(options)\n      setIsLoading(false)\n      return tx\n    } catch (e) {\n      setIsLoading(false)\n      return false\n    }\n  }, [nftTokenContract, account])\n\n  return [isLoading, approveNFT]\n}\n\n// List token\nexport const useListToken = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isListed, setIsListed] = useState<any>(false)\n  const marketplaceContract = useMarketplace()\n\n  const { account } = useWeb3React()\n\n  const listToken = useCallback(\n    async (erc721Address: string, tokenId: string, price: any, expireTimestamp: any) => {\n      try {\n        setIsLoading(true)\n        const tx = await marketplaceContract.methods\n          .listToken(erc721Address, tokenId, new BigNumber(price).times(10 ** 18).toString(10), expireTimestamp)\n          .send({ from: account })\n        setIsLoading(false)\n        if (tx) {\n          setIsListed(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [marketplaceContract, account],\n  )\n\n  return [isLoading, isListed, listToken]\n}\n\n// Get WCORE Allowance\nexport const useGetAllowanceWCORE = () => {\n  const [isAllowed, setIsAllowed] = useState<any>(false)\n  const tokenContract = useWcore()\n  const { account } = useWeb3React()\n\n  const getAllowanceWCORE = useCallback(async () => {\n    const allowance = await tokenContract.methods.allowance(account, getNftMarketplaceAddress()).call()\n    if (!new BigNumber(allowance).isZero()) {\n      setIsAllowed(true)\n    }\n  }, [account, tokenContract])\n\n  useEffect(() => {\n    if (account) {\n      getAllowanceWCORE()\n    }\n  }, [account, getAllowanceWCORE])\n\n  return [isAllowed]\n}\n\n// Convert CORE to WCORE\nexport const useConvertToWCORE = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isConverted, setIsConverted] = useState<any>(false)\n\n  const tokenContract = useWcore()\n  const { account } = useWeb3React()\n\n  const convertToWCORE = useCallback(\n    async (amount: any) => {\n      try {\n        setIsLoading(true)\n        const options = {\n          from: account,\n          value: new BigNumber(amount).times(10 ** 18).toString(10),\n        }\n        const tx = await tokenContract.methods.deposit().send(options)\n        setIsLoading(false)\n        if (tx) {\n          setIsConverted(true)\n        }\n        return tx\n      } catch (e) {\n        console.log('e', e)\n        setIsLoading(false)\n        return false\n      }\n    },\n    [tokenContract, account],\n  )\n\n  return [isLoading, isConverted, convertToWCORE]\n}\n\n// Approve WCORE\nexport const useApproveWCORE = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isWcoreApproved, setIsWcoreApproved] = useState<any>(false)\n\n  const tokenContract = useWcore()\n  const { account } = useWeb3React()\n\n  const approveWCORE = useCallback(\n    async (amount: any) => {\n      try {\n        setIsLoading(true)\n        const options = {\n          from: account,\n        }\n        const tx = await tokenContract.methods\n          .approve(getNftMarketplaceAddress(), ethers.constants.MaxUint256)\n          .send(options)\n        setIsLoading(false)\n        if (tx) {\n          setIsWcoreApproved(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [tokenContract, account],\n  )\n\n  return [isLoading, isWcoreApproved, approveWCORE]\n}\n\n// Bid to token\nexport const useBidToken = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isPlaceBid, setIsPlaceBid] = useState<any>(false)\n  const marketplaceContract = useMarketplace()\n\n  const { account } = useWeb3React()\n\n  const bidToken = useCallback(\n    async (erc721Address: string, tokenId: string, price: any, expireTimestamp: any) => {\n      try {\n        setIsLoading(true)\n        const tx = await marketplaceContract.methods\n          .enterBidForToken(erc721Address, tokenId, new BigNumber(price).times(10 ** 18).toString(10), expireTimestamp)\n          .send({ from: account })\n        setIsLoading(false)\n        if (tx) {\n          setIsPlaceBid(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [marketplaceContract, account],\n  )\n\n  return [isLoading, isPlaceBid, bidToken]\n}\n\n// Buy Token\nexport const useBuyToken = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const marketplaceContract = useMarketplace()\n\n  const { account } = useWeb3React()\n\n  const buyToken = useCallback(\n    async (amount: any, erc721Address: string, tokenId: string) => {\n      if (!account) return false\n      try {\n        setIsLoading(true)\n        const _amount = new BigNumber(amount).times(10 ** 18).toString(10)\n        const options = {\n          from: account,\n          value: _amount,\n        }\n        const tx = await marketplaceContract.methods.buyToken(erc721Address, tokenId).send(options)\n        setIsLoading(false)\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [marketplaceContract, account],\n  )\n\n  return [isLoading, buyToken]\n}\n\n// Delist token\nexport const useDelistToken = () => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isDelisted, setIsDelisted] = useState<any>(false)\n  const marketplaceContract = useMarketplace()\n\n  const { account } = useWeb3React()\n\n  const deListToken = useCallback(\n    async (erc721Address: string, tokenId: string) => {\n      try {\n        setIsLoading(true)\n        const tx = await marketplaceContract.methods.delistToken(erc721Address, tokenId).send({ from: account })\n        setIsLoading(false)\n        if (tx) {\n          setIsDelisted(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [marketplaceContract, account],\n  )\n\n  return [isLoading, isDelisted, deListToken]\n}\n\n// Transfer token\nexport const useTransferToken = (erc721Address: string) => {\n  const [isLoading, setIsLoading] = useState<any>(false)\n  const [isTransferred, setTransferred] = useState<any>(false)\n\n  const { account } = useWeb3React()\n  const nftTokenContract = useERC721(erc721Address)\n\n  const transferToken = useCallback(\n    async (from: string, to: string, tokenId: string) => {\n      try {\n        setIsLoading(true)\n        const tx = await nftTokenContract.methods.safeTransferFrom(from, to, tokenId).send({ from: account })\n        setIsLoading(false)\n        if (tx) {\n          setTransferred(true)\n        }\n        return tx\n      } catch (e) {\n        setIsLoading(false)\n        return false\n      }\n    },\n    [nftTokenContract, account],\n  )\n\n  return [isLoading, isTransferred, transferToken]\n}\n"],"sourceRoot":""}