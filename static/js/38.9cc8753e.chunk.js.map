{"version":3,"sources":["hooks/api.ts","components/Marketplace/CollectionCard/index.tsx","views/Marketplace/Marketplace.tsx"],"names":["useGetStats","useState","data","setData","useEffect","a","bowClient","query","factoryQuery","variables","fetchPolicy","result","pairTVL","uniswapFactories","map","factory","parseFloat","totalLiquidityUSD","update_at","total_value_locked","total_value_locked_all","trade_pairs","console","error","fetchData","useTokensData","tokensQuery","tokens","length","useCollections","marketplaceClient","getERC721CollectionsQuery","res","GetERC721Collections","useCollection","alias","getERC721CollectionQuery","GetERC721Collection","useCollectionAttributes","getERC721CollectionAttributesQuery","GetERC721CollectionAttributes","currentInput1","useERC721TokenCount","input","getERC721TokenCountQuery","GetERC721TokenCount","pageSize","filters","JSON","stringify","currentInput2","useERC721Tokens","getERC721TokensQuery","GetERC721Tokens","currentInput3","useERC721RecentEventsLite","ERC721RecentEventsLiteQuery","ERC721RecentEventsLite","chainId","tokenAddress","useERC721Token","tokenId","getERC721TokenQuery","GetERC721Token","currentInput4","useERC721TokenEvents","ERC721TokenEventsQuery","ERC721TokenEvents","CollectionCardContainer","styled","div","theme","colors","card","text","CollectionCard","collectionInfo","className","src","bannerUrl","alt","name","to","Background","CollectionList","Marketplace","isDark","useTheme","collections","Banner","mobileSrc","title","collection"],"mappings":"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","file":"static/js/38.9cc8753e.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport { bowClient, marketplaceClient } from '../apollo/client'\nimport {\n  factoryQuery,\n  tokensQuery,\n  getERC721CollectionsQuery,\n  getERC721CollectionQuery,\n  getERC721CollectionAttributesQuery,\n  getERC721TokenCountQuery,\n  getERC721TokensQuery,\n  ERC721RecentEventsLiteQuery,\n  getERC721TokenQuery,\n  ERC721TokenEventsQuery,\n} from '../apollo/queries'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await bowClient.query({\n          query: factoryQuery,\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n\n        if (result?.data) {\n          let pairTVL = 0\n          result.data.uniswapFactories.map((factory) => {\n            pairTVL += parseFloat(factory.totalLiquidityUSD)\n            return pairTVL\n          })\n\n          const responsedata: ApiStatResponse = {\n            update_at: '',\n            '24h_total_volume': 0,\n            total_value_locked: 0,\n            total_value_locked_all: pairTVL,\n            trade_pairs: null,\n          }\n          setData(responsedata)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\nexport const useTokensData = () => {\n  const [data, setData] = useState<ApiStatResponse | 0>(0)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const result = await bowClient.query({\n          query: tokensQuery,\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        setData(result?.data?.tokens.length)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\n// Marketplace GraphQL\n\nexport const useCollections = () => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res } = await marketplaceClient.query({\n          query: getERC721CollectionsQuery,\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        setData(res.GetERC721Collections || [])\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n\nexport const useCollection = (alias: string) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721CollectionQuery(alias),\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721Collection && res.GetERC721Collection.length !== 0) {\n          setData(res.GetERC721Collection[0])\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [alias])\n\n  return data\n}\n\nexport const useCollectionAttributes = (alias: string) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721CollectionAttributesQuery(alias),\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721CollectionAttributes) {\n          setData(res.GetERC721CollectionAttributes)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [alias])\n\n  return data\n}\n\nlet currentInput1 = {}\nexport const useERC721TokenCount = (input: any) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    currentInput1 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721TokenCountQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721TokenCount) {\n          setData(res.GetERC721TokenCount)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (input.pageSize && input.filters && JSON.stringify(input) !== JSON.stringify(currentInput1)) {\n      currentInput1 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n\nlet currentInput2 = {}\nexport const useERC721Tokens = (input: any) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    currentInput2 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721TokensQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721Tokens) {\n          setData(res.GetERC721Tokens)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (JSON.stringify(input) !== JSON.stringify(currentInput2)) {\n      currentInput2 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n\nlet currentInput3 = {}\nexport const useERC721RecentEventsLite = (input: any) => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    currentInput3 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: ERC721RecentEventsLiteQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.ERC721RecentEventsLite) {\n          setData(res.ERC721RecentEventsLite)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput3)) {\n      currentInput3 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n\nexport const useERC721Token = (alias: string, tokenId: string) => {\n  const [data, setData] = useState({})\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: getERC721TokenQuery(alias, tokenId),\n          variables: {},\n          fetchPolicy: 'no-cache',\n        })\n        if (res.GetERC721Token) {\n          setData(res.GetERC721Token)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [alias, tokenId])\n\n  return data\n}\n\nlet currentInput4 = {}\nexport const useERC721TokenEvents = (input: any) => {\n  const [data, setData] = useState([])\n\n  useEffect(() => {\n    currentInput4 = {}\n  }, [])\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const { data: res }: any = await marketplaceClient.query({\n          query: ERC721TokenEventsQuery,\n          variables: { input },\n          fetchPolicy: 'no-cache',\n        })\n        if (res.ERC721TokenEvents) {\n          setData(res.ERC721TokenEvents)\n        }\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n    if (input.chainId && input.tokenAddress && JSON.stringify(input) !== JSON.stringify(currentInput4)) {\n      currentInput4 = input\n      fetchData()\n    }\n  }, [input])\n\n  return data\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from 'archerswap-uikit'\nimport { Link } from 'react-router-dom'\n\nconst CollectionCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n  background: ${({ theme }) => theme.colors.card};\n  box-shadow: 0px 4px 10px rgba(105, 105, 105, 0.15);\n  border-radius: 16px;\n\n  .collection_wrap {\n    height: 160px;\n    overflow: hidden;\n    border-top-left-radius: 16px;\n    border-top-right-radius: 16px;\n  }\n\n  .name {\n    font-weight: 600;\n    font-size: 20px;\n    color: ${({ theme }) => theme.colors.text};\n    margin-top: 18px;\n    margin-bottom: 18px;\n  }\n\n  button {\n    width: 148px;\n    height: 28px;\n    background-color: transparent;\n    box-sizing: border-box;\n    border-radius: 24px;\n    margin-bottom: 20px;\n    font-weight: 500;\n    font-size: 12px;\n  }\n`\nconst CollectionCard = ({ collectionInfo = {} }: any) => {\n  return (\n    <CollectionCardContainer>\n      <div className=\"collection_wrap\">\n        <img className=\"collection_banner\" src={collectionInfo.bannerUrl} alt=\"collection\" />\n      </div>\n      <div className=\"name\">{collectionInfo.name || ''}</div>\n      <Link to={`/marketplace/${collectionInfo.alias}`}>\n        <Button>Marketplace</Button>\n      </Link>\n    </CollectionCardContainer>\n  )\n}\n\nexport default CollectionCard\n","/* eslint-disable no-nested-ternary */\nimport React from 'react'\nimport styled from 'styled-components'\nimport useTheme from 'hooks/useTheme'\nimport Banner from 'components/Banner'\nimport CollectionCard from 'components/Marketplace/CollectionCard'\nimport { useCollections } from 'hooks/api'\n\nconst Background = styled.div<any>`\n  width: 100%;\n  min-height: calc(100vh - 64px);\n  background: ${({ theme }) => theme.colors.card};\n\n  .my-nft-btn-wrap {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n    padding: 0 85px;\n\n    @media (max-width: 768px) {\n      padding: 0 24px;\n    }\n  }\n`\n\nconst CollectionList = styled.div`\n  width: 100%;\n  display: grid;\n  column-gap: 24px;\n  row-gap: 32px;\n  grid-template-columns: repeat(auto-fit, minmax(312px, 312px));\n  justify-content: center;\n  padding: 40px 85px;\n  background: ${({ theme }) => theme.colors.card};\n\n  @media (max-width: 768px) {\n    grid-template-columns: repeat(auto-fit, minmax(240px, 240px));\n    justify-content: center;\n    padding: 24px;\n  }\n`\n\nconst Marketplace: React.FC = () => {\n  const { isDark } = useTheme()\n  const collections = useCollections()\n\n  return (\n    <Background isDark={isDark}>\n      <Banner\n        src=\"/images/assets/banners/marketplace_banner.png\"\n        mobileSrc=\"/images/assets/banners/mobile_marketplace_banner.png\"\n        alt=\"marketplace_banner\"\n        title=\"NFT MARKET\"\n        text=\"Buy and Sell NFTs on CORE Network\"\n      />\n      <CollectionList>\n        {collections.map((collection) => (\n          <CollectionCard collectionInfo={collection} key={collection.name} />\n        ))}\n      </CollectionList>\n    </Background>\n  )\n}\n\nexport default Marketplace\n"],"sourceRoot":""}